/**
 * Transactional Email
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/// <reference types="node" />
import http = require('http');
import { CollectionResponseSmtpApiTokenView } from '../model/collectionResponseSmtpApiTokenView';
import { EmailSendStatusView } from '../model/emailSendStatusView';
import { PublicSingleSendRequestEgg } from '../model/publicSingleSendRequestEgg';
import { SmtpApiTokenRequestEgg } from '../model/smtpApiTokenRequestEgg';
import { SmtpApiTokenView } from '../model/smtpApiTokenView';
import { Authentication, Interceptor } from '../model/models';
import { ApiKeyAuth, OAuth } from '../model/models';
export declare enum DefaultApiApiKeys {
    hapikey = 0
}
export declare class DefaultApi {
    protected _basePath: string;
    protected _defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        hapikey: ApiKeyAuth;
        oauth2: OAuth;
    };
    protected interceptors: Interceptor[];
    constructor(basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    set defaultHeaders(defaultHeaders: any);
    get defaultHeaders(): any;
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: DefaultApiApiKeys, value: string): void;
    set accessToken(token: string);
    addInterceptor(interceptor: Interceptor): void;
    /**
     * Delete a single token by ID.
     * @summary Delete a single token by ID.
     * @param tokenId Identifier generated when a token is created.
     */
    archiveToken(tokenId: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    /**
     * Create a SMTP API token.
     * @summary Create a SMTP API token.
     * @param smtpApiTokenRequestEgg A request object that includes the campaign name tied to the token and whether contacts should be created for recipients of emails.
     */
    createToken(smtpApiTokenRequestEgg?: SmtpApiTokenRequestEgg, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: SmtpApiTokenView;
    }>;
    /**
     * Query a single token by ID.
     * @summary Query a single token by ID.
     * @param tokenId Identifier generated when a token is created.
     */
    getTokenById(tokenId: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: SmtpApiTokenView;
    }>;
    /**
     * Query multiple SMTP API tokens by campaign name or a single token by emailCampaignId.
     * @summary Query SMTP API tokens by campaign name or an emailCampaignId.
     * @param campaignName A name for the campaign tied to the SMTP API token.
     * @param emailCampaignId Identifier assigned to the campaign provided during the token creation.
     * @param after Starting point to get the next set of results.
     * @param limit Maximum number of tokens to return.
     */
    getTokensPage(campaignName?: string, emailCampaignId?: string, after?: string, limit?: number, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: CollectionResponseSmtpApiTokenView;
    }>;
    /**
     * Allows the creation of a replacement password for a given token. Once the password is successfully reset, the old password for the token will be invalid.
     * @summary Reset the password of an existing token.
     * @param tokenId Identifier generated when a token is created.
     */
    resetPassword(tokenId: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: SmtpApiTokenView;
    }>;
    /**
     * Asynchronously send a transactional email. Returns the status of the email send with a statusId that can be used to continuously query for the status using the Email Send Status API.
     * @summary Send a single transactional email asynchronously.
     * @param publicSingleSendRequestEgg A request object describing the email to send.
     */
    sendEmail(publicSingleSendRequestEgg?: PublicSingleSendRequestEgg, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: EmailSendStatusView;
    }>;
}
