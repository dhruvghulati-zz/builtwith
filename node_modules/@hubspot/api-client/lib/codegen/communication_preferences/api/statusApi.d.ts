/**
 * Subscriptions
 * Subscriptions allow contacts to control what forms of communications they receive. Contacts can decide whether they want to receive communication pertaining to a specific topic, brand, or an entire HubSpot account.
 *
 * The version of the OpenAPI document: v3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/// <reference types="node" />
import http = require('http');
import { PublicSubscriptionStatus } from '../model/publicSubscriptionStatus';
import { PublicSubscriptionStatusesResponse } from '../model/publicSubscriptionStatusesResponse';
import { PublicUpdateSubscriptionStatusRequest } from '../model/publicUpdateSubscriptionStatusRequest';
import { Authentication, Interceptor } from '../model/models';
import { ApiKeyAuth } from '../model/models';
export declare enum StatusApiApiKeys {
    hapikey = 0
}
export declare class StatusApi {
    protected _basePath: string;
    protected _defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        hapikey: ApiKeyAuth;
    };
    protected interceptors: Interceptor[];
    constructor(basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    set defaultHeaders(defaultHeaders: any);
    get defaultHeaders(): any;
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: StatusApiApiKeys, value: string): void;
    addInterceptor(interceptor: Interceptor): void;
    /**
     * Returns a list of subscriptions and their status for a given contact.
     * @summary Get subscription statuses for a contact
     * @param emailAddress
     */
    getEmailStatus(emailAddress: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: PublicSubscriptionStatusesResponse;
    }>;
    /**
     * Subscribes a contact to the given subscription type. This API is not valid to use for subscribing a contact at a brand or portal level and will return an error.
     * @summary Subscribe a contact
     * @param publicUpdateSubscriptionStatusRequest
     */
    subscribe(publicUpdateSubscriptionStatusRequest: PublicUpdateSubscriptionStatusRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: PublicSubscriptionStatus;
    }>;
    /**
     * Unsubscribes a contact from the given subscription type. This API is not valid to use for unsubscribing a contact at a brand or portal level and will return an error.
     * @summary Unsubscribe a contact
     * @param publicUpdateSubscriptionStatusRequest
     */
    unsubscribe(publicUpdateSubscriptionStatusRequest: PublicUpdateSubscriptionStatusRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: PublicSubscriptionStatus;
    }>;
}
