/**
 * Webhooks API
 * Provides a way for apps to subscribe to certain change events in HubSpot. Once configured, apps will receive event payloads containing details about the changes at a specified target URL. There can only be one target URL for receiving event notifications per app.
 *
 * The version of the OpenAPI document: v3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/// <reference types="node" />
import http = require('http');
import { BatchInputSubscriptionBatchUpdateRequest } from '../model/batchInputSubscriptionBatchUpdateRequest';
import { BatchResponseSubscriptionResponse } from '../model/batchResponseSubscriptionResponse';
import { SubscriptionCreateRequest } from '../model/subscriptionCreateRequest';
import { SubscriptionListResponse } from '../model/subscriptionListResponse';
import { SubscriptionPatchRequest } from '../model/subscriptionPatchRequest';
import { SubscriptionResponse } from '../model/subscriptionResponse';
import { Authentication, Interceptor } from '../model/models';
import { ApiKeyAuth } from '../model/models';
export declare enum SubscriptionsApiApiKeys {
    hapikey = 0
}
export declare class SubscriptionsApi {
    protected _basePath: string;
    protected _defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        hapikey: ApiKeyAuth;
    };
    protected interceptors: Interceptor[];
    constructor(basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    set defaultHeaders(defaultHeaders: any);
    get defaultHeaders(): any;
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: SubscriptionsApiApiKeys, value: string): void;
    addInterceptor(interceptor: Interceptor): void;
    /**
     * Permanently deletes a subscription. This cannot be undone.
     * @summary Delete a subscription
     * @param subscriptionId The ID of subscription to delete.
     * @param appId The ID of the target app.
     */
    archive(subscriptionId: number, appId: number, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    /**
     * Creates a new webhook subscription for the given app. Each subscription in an app must be unique.
     * @summary Subscribe to an event
     * @param appId The ID of the target app.
     * @param subscriptionCreateRequest Details about the new subscription.
     */
    create(appId: number, subscriptionCreateRequest: SubscriptionCreateRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: SubscriptionResponse;
    }>;
    /**
     * Returns full details for all existing subscriptions for the given app.
     * @summary Get subscription details
     * @param appId The ID of the target app.
     */
    getAll(appId: number, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: SubscriptionListResponse;
    }>;
    /**
     * Returns details about a subscription.
     * @summary Get subscription
     * @param appId The ID of the target app.
     * @param subscriptionId The ID of the target subscription.
     */
    getById(appId: number, subscriptionId: number, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: SubscriptionResponse;
    }>;
    /**
     * Updates the details for an existing subscription.
     * @summary Update a subscription
     * @param subscriptionId The ID of the subscription to update.
     * @param appId The ID of the target app.
     * @param subscriptionPatchRequest Updated details for the subscription.
     */
    update(subscriptionId: number, appId: number, subscriptionPatchRequest: SubscriptionPatchRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: SubscriptionResponse;
    }>;
    /**
     * Activates or deactivates target app subscriptions.
     * @summary Batch update subscriptions
     * @param appId The app ID of the target app.
     * @param batchInputSubscriptionBatchUpdateRequest Updated details for the specified subscriptions.
     */
    updateBatch(appId: number, batchInputSubscriptionBatchUpdateRequest: BatchInputSubscriptionBatchUpdateRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: BatchResponseSubscriptionResponse;
    }>;
}
