/**
 * Files
 * Upload and manage files.
 *
 * The version of the OpenAPI document: v3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/// <reference types="node" />
import http = require('http');
import { CollectionResponseFolder } from '../model/collectionResponseFolder';
import { Folder } from '../model/folder';
import { FolderActionResponse } from '../model/folderActionResponse';
import { FolderInput } from '../model/folderInput';
import { FolderUpdateInput } from '../model/folderUpdateInput';
import { FolderUpdateTaskLocator } from '../model/folderUpdateTaskLocator';
import { Authentication, Interceptor } from '../model/models';
import { ApiKeyAuth, OAuth } from '../model/models';
export declare enum FoldersApiApiKeys {
    hapikey = 0
}
export declare class FoldersApi {
    protected _basePath: string;
    protected _defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        hapikey: ApiKeyAuth;
        oauth2: OAuth;
    };
    protected interceptors: Interceptor[];
    constructor(basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    set defaultHeaders(defaultHeaders: any);
    get defaultHeaders(): any;
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: FoldersApiApiKeys, value: string): void;
    set accessToken(token: string);
    addInterceptor(interceptor: Interceptor): void;
    /**
     * Delete folder by ID.
     * @summary Delete folder.
     * @param folderId ID of folder to delete.
     */
    archive(folderId: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    /**
     * Delete folder by path.
     * @summary Delete folder.
     * @param folderPath Path of folder to delete
     */
    archiveByPath(folderPath: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    /**
     * Check status of folder update. Folder updates happen asynchronously.
     * @summary Check folder update status.
     * @param taskId Task ID of folder update
     */
    checkUpdateStatus(taskId: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: FolderActionResponse;
    }>;
    /**
     * Creates a folder.
     * @summary Create folder.
     * @param folderInput Folder creation options
     */
    create(folderInput: FolderInput, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Folder;
    }>;
    /**
     * Search for folders. Does not contain hidden or archived folders.
     * @summary Search folders
     * @param properties Properties that should be included in the returned folders.
     * @param after The maximum offset of items for a given search is 10000. Narrow your search down if you are reaching this limit.
     * @param before
     * @param limit Limit of results to return. Max limit is 100.
     * @param sort Sort results by given property. For example -name sorts by name field descending, name sorts by name field ascending.
     * @param id Search folder by given ID.
     * @param createdAt Search for folders with the given creation timestamp.
     * @param createdAtLte
     * @param createdAtGte
     * @param updatedAt Search for folder at given update timestamp.
     * @param updatedAtLte
     * @param updatedAtGte
     * @param name Search for folders containing the specified name.
     * @param path Search for folders by path.
     * @param parentFolderId Search for folders with the given parent folder ID.
     */
    doSearch(properties?: Array<string>, after?: string, before?: string, limit?: number, sort?: Array<string>, id?: string, createdAt?: Date, createdAtLte?: Date, createdAtGte?: Date, updatedAt?: Date, updatedAtLte?: Date, updatedAtGte?: Date, name?: string, path?: string, parentFolderId?: number, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: CollectionResponseFolder;
    }>;
    /**
     * Get folder by ID
     * @summary Get folder
     * @param folderId ID of desired folder
     * @param properties Properties to set on returned folder.
     */
    getById(folderId: string, properties?: Array<string>, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Folder;
    }>;
    /**
     * Get folder by path.
     * @summary Get folder.
     * @param folderPath Path of desired folder.
     * @param properties Properties to set on returned folder.
     */
    getByPath(folderPath: string, properties?: Array<string>, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Folder;
    }>;
    /**
     * Update properties of folder by given ID. This action happens asynchronously and will update all of the folder\'s children as well.
     * @summary Update folder properties
     * @param folderUpdateInput Properties to change in the folder
     */
    updateProperties(folderUpdateInput: FolderUpdateInput, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: FolderUpdateTaskLocator;
    }>;
}
