/**
 * Blog Post endpoints
 * \"Use these endpoints for interacting with Blog Posts, Blog Authors, and Blog Tags\"
 *
 * The version of the OpenAPI document: v3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/// <reference types="node" />
import http = require('http');
import { BatchInputJsonNode } from '../model/batchInputJsonNode';
import { BatchInputString } from '../model/batchInputString';
import { BatchInputTag } from '../model/batchInputTag';
import { CollectionResponseWithTotalTagForwardPaging } from '../model/collectionResponseWithTotalTagForwardPaging';
import { Tag } from '../model/tag';
import { Authentication, Interceptor } from '../model/models';
import { ApiKeyAuth, OAuth } from '../model/models';
export declare enum DefaultApiApiKeys {
    hapikey = 0
}
export declare class DefaultApi {
    protected _basePath: string;
    protected _defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        hapikey: ApiKeyAuth;
        oauth2: OAuth;
    };
    protected interceptors: Interceptor[];
    constructor(basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    set defaultHeaders(defaultHeaders: any);
    get defaultHeaders(): any;
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: DefaultApiApiKeys, value: string): void;
    set accessToken(token: string);
    addInterceptor(interceptor: Interceptor): void;
    /**
     * Delete the Blog Tag object identified by the id in the path.
     * @summary Delete a Blog Tag
     * @param objectId The Blog Tag id.
     * @param archived Whether to return only results that have been archived.
     */
    archive(objectId: string, archived?: boolean, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    /**
     * Delete the Blog Tag objects identified in the request body. Note: This is not the same as the in-app `archive` function.
     * @summary Archive a batch of Blog Tags
     * @param batchInputString The JSON array of Blog Tag ids.
     */
    archiveBatch(batchInputString: BatchInputString, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    /**
     * Create a new Blog Tag.
     * @summary Create a new Blog Tag
     * @param tag The JSON representation of a new Blog Tag.
     */
    create(tag: Tag, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Tag;
    }>;
    /**
     * Create the Blog Tag objects detailed in the request body.
     * @summary Create a batch of Blog Tags
     * @param batchInputTag The JSON array of new Blog Tags to create.
     */
    createBatch(batchInputTag: BatchInputTag, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: object;
    }>;
    /**
     * Retrieve the Blog Tag object identified by the id in the path.
     * @summary Retrieve a Blog Tag
     * @param objectId The Blog Tag id.
     * @param archived Specifies whether to return archived Blog Tags. Defaults to &#x60;false&#x60;.
     */
    getById(objectId: string, archived?: boolean, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Tag;
    }>;
    /**
     * Get the list of blog tags. Supports paging and filtering. This method would be useful for an integration that examined these models and used an external service to suggest edits.
     * @summary Get all Blog Tags
     * @param createdAt Only return Blog Tags created at exactly the specified time.
     * @param createdAfter Only return Blog Tags created after the specified time.
     * @param createdBefore Only return Blog Tags created before the specified time.
     * @param updatedAt Only return Blog Tags last updated at exactly the specified time.
     * @param updatedAfter Only return Blog Tags last updated after the specified time.
     * @param updatedBefore Only return Blog Tags last updated before the specified time.
     * @param sort Specifies which fields to use for sorting results. Valid fields are &#x60;name&#x60;, &#x60;createdAt&#x60;, &#x60;updatedAt&#x60;, &#x60;createdBy&#x60;, &#x60;updatedBy&#x60;. &#x60;createdAt&#x60; will be used by default.
     * @param after The cursor token value to get the next set of results. You can get this from the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results.
     * @param limit The maximum number of results to return. Default is 100.
     * @param archived Specifies whether to return archived Blog Tags. Defaults to &#x60;false&#x60;.
     */
    getPage(createdAt?: Date, createdAfter?: Date, createdBefore?: Date, updatedAt?: Date, updatedAfter?: Date, updatedBefore?: Date, sort?: Array<string>, after?: string, limit?: number, archived?: boolean, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: CollectionResponseWithTotalTagForwardPaging;
    }>;
    /**
     * Retrieve the Blog Tag objects identified in the request body.
     * @summary Retrieve a batch of Blog Tags
     * @param batchInputString The JSON array of Blog Tag ids.
     * @param archived Specifies whether to return archived Blog Tags. Defaults to &#x60;false&#x60;.
     */
    readBatch(batchInputString: BatchInputString, archived?: boolean, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: object;
    }>;
    /**
     * Sparse updates a single Blog Tag object identified by the id in the path. All the column values need not be specified. Only the that need to be modified can be specified.
     * @summary Update a Blog Tag
     * @param objectId The Blog Tag id.
     * @param tag The JSON representation of the updated Blog Tag.
     * @param archived Specifies whether to update archived Blog Tags. Defaults to &#x60;false&#x60;.
     */
    update(objectId: string, tag: Tag, archived?: boolean, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Tag;
    }>;
    /**
     * Update the Blog Tag objects identified in the request body.
     * @summary Update a batch of Blog Tags
     * @param batchInputJsonNode A JSON array of the JSON representations of the updated Blog Tags.
     * @param archived Specifies whether to update archived Blog Tags. Defaults to &#x60;false&#x60;.
     */
    updateBatch(batchInputJsonNode: BatchInputJsonNode, archived?: boolean, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: object;
    }>;
}
