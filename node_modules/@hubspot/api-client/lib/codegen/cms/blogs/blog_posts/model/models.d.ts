export * from './angle';
export * from './backgroundImage';
export * from './batchInputBlogPost';
export * from './batchInputJsonNode';
export * from './batchInputString';
export * from './batchResponseBlogPostWithErrors';
export * from './blogPost';
export * from './collectionResponseWithTotalBlogPostForwardPaging';
export * from './collectionResponseWithTotalVersionBlogPost';
export * from './colorStop';
export * from './contentCloneRequestVNext';
export * from './contentScheduleRequestVNext';
export * from './errorDetail';
export * from './forwardPaging';
export * from './gradient';
export * from './layoutSection';
export * from './modelError';
export * from './nextPage';
export * from './paging';
export * from './previousPage';
export * from './rGBAColor';
export * from './rowMetaData';
export * from './sideOrCorner';
export * from './standardError';
export * from './styles';
export * from './versionBlogPost';
export * from './versionUser';
import localVarRequest = require('request');
export declare class ObjectSerializer {
    static findCorrectType(data: any, expectedType: string): any;
    static serialize(data: any, type: string): any;
    static deserialize(data: any, type: string): any;
}
export interface Authentication {
    /**
    * Apply authentication settings to header and query params.
    */
    applyToRequest(requestOptions: localVarRequest.Options): Promise<void> | void;
}
export declare class HttpBasicAuth implements Authentication {
    username: string;
    password: string;
    applyToRequest(requestOptions: localVarRequest.Options): void;
}
export declare class HttpBearerAuth implements Authentication {
    accessToken: string | (() => string);
    applyToRequest(requestOptions: localVarRequest.Options): void;
}
export declare class ApiKeyAuth implements Authentication {
    private location;
    private paramName;
    apiKey: string;
    constructor(location: string, paramName: string);
    applyToRequest(requestOptions: localVarRequest.Options): void;
}
export declare class OAuth implements Authentication {
    accessToken: string;
    applyToRequest(requestOptions: localVarRequest.Options): void;
}
export declare class VoidAuth implements Authentication {
    username: string;
    password: string;
    applyToRequest(_: localVarRequest.Options): void;
}
export declare type Interceptor = (requestOptions: localVarRequest.Options) => (Promise<void> | void);
