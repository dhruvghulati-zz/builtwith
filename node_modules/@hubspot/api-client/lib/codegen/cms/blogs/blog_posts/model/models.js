"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VoidAuth = exports.OAuth = exports.ApiKeyAuth = exports.HttpBearerAuth = exports.HttpBasicAuth = exports.ObjectSerializer = void 0;
__exportStar(require("./angle"), exports);
__exportStar(require("./backgroundImage"), exports);
__exportStar(require("./batchInputBlogPost"), exports);
__exportStar(require("./batchInputJsonNode"), exports);
__exportStar(require("./batchInputString"), exports);
__exportStar(require("./batchResponseBlogPostWithErrors"), exports);
__exportStar(require("./blogPost"), exports);
__exportStar(require("./collectionResponseWithTotalBlogPostForwardPaging"), exports);
__exportStar(require("./collectionResponseWithTotalVersionBlogPost"), exports);
__exportStar(require("./colorStop"), exports);
__exportStar(require("./contentCloneRequestVNext"), exports);
__exportStar(require("./contentScheduleRequestVNext"), exports);
__exportStar(require("./errorDetail"), exports);
__exportStar(require("./forwardPaging"), exports);
__exportStar(require("./gradient"), exports);
__exportStar(require("./layoutSection"), exports);
__exportStar(require("./modelError"), exports);
__exportStar(require("./nextPage"), exports);
__exportStar(require("./paging"), exports);
__exportStar(require("./previousPage"), exports);
__exportStar(require("./rGBAColor"), exports);
__exportStar(require("./rowMetaData"), exports);
__exportStar(require("./sideOrCorner"), exports);
__exportStar(require("./standardError"), exports);
__exportStar(require("./styles"), exports);
__exportStar(require("./versionBlogPost"), exports);
__exportStar(require("./versionUser"), exports);
const angle_1 = require("./angle");
const backgroundImage_1 = require("./backgroundImage");
const batchInputBlogPost_1 = require("./batchInputBlogPost");
const batchInputJsonNode_1 = require("./batchInputJsonNode");
const batchInputString_1 = require("./batchInputString");
const batchResponseBlogPostWithErrors_1 = require("./batchResponseBlogPostWithErrors");
const blogPost_1 = require("./blogPost");
const collectionResponseWithTotalBlogPostForwardPaging_1 = require("./collectionResponseWithTotalBlogPostForwardPaging");
const collectionResponseWithTotalVersionBlogPost_1 = require("./collectionResponseWithTotalVersionBlogPost");
const colorStop_1 = require("./colorStop");
const contentCloneRequestVNext_1 = require("./contentCloneRequestVNext");
const contentScheduleRequestVNext_1 = require("./contentScheduleRequestVNext");
const errorDetail_1 = require("./errorDetail");
const forwardPaging_1 = require("./forwardPaging");
const gradient_1 = require("./gradient");
const layoutSection_1 = require("./layoutSection");
const modelError_1 = require("./modelError");
const nextPage_1 = require("./nextPage");
const paging_1 = require("./paging");
const previousPage_1 = require("./previousPage");
const rGBAColor_1 = require("./rGBAColor");
const rowMetaData_1 = require("./rowMetaData");
const sideOrCorner_1 = require("./sideOrCorner");
const standardError_1 = require("./standardError");
const styles_1 = require("./styles");
const versionBlogPost_1 = require("./versionBlogPost");
const versionUser_1 = require("./versionUser");
/* tslint:disable:no-unused-variable */
let primitives = [
    "string",
    "boolean",
    "double",
    "integer",
    "long",
    "float",
    "number",
    "any"
];
let enumsMap = {
    "Angle.UnitsEnum": angle_1.Angle.UnitsEnum,
    "BackgroundImage.BackgroundPositionEnum": backgroundImage_1.BackgroundImage.BackgroundPositionEnum,
    "BatchResponseBlogPostWithErrors.StatusEnum": batchResponseBlogPostWithErrors_1.BatchResponseBlogPostWithErrors.StatusEnum,
    "BlogPost.AbStatusEnum": blogPost_1.BlogPost.AbStatusEnum,
    "BlogPost.LanguageEnum": blogPost_1.BlogPost.LanguageEnum,
    "BlogPost.ContentTypeCategoryEnum": blogPost_1.BlogPost.ContentTypeCategoryEnum,
    "BlogPost.CurrentStateEnum": blogPost_1.BlogPost.CurrentStateEnum,
    "SideOrCorner.VerticalSideEnum": sideOrCorner_1.SideOrCorner.VerticalSideEnum,
    "SideOrCorner.HorizontalSideEnum": sideOrCorner_1.SideOrCorner.HorizontalSideEnum,
    "Styles.VerticalAlignmentEnum": styles_1.Styles.VerticalAlignmentEnum,
    "Styles.FlexboxPositioningEnum": styles_1.Styles.FlexboxPositioningEnum,
};
let typeMap = {
    "Angle": angle_1.Angle,
    "BackgroundImage": backgroundImage_1.BackgroundImage,
    "BatchInputBlogPost": batchInputBlogPost_1.BatchInputBlogPost,
    "BatchInputJsonNode": batchInputJsonNode_1.BatchInputJsonNode,
    "BatchInputString": batchInputString_1.BatchInputString,
    "BatchResponseBlogPostWithErrors": batchResponseBlogPostWithErrors_1.BatchResponseBlogPostWithErrors,
    "BlogPost": blogPost_1.BlogPost,
    "CollectionResponseWithTotalBlogPostForwardPaging": collectionResponseWithTotalBlogPostForwardPaging_1.CollectionResponseWithTotalBlogPostForwardPaging,
    "CollectionResponseWithTotalVersionBlogPost": collectionResponseWithTotalVersionBlogPost_1.CollectionResponseWithTotalVersionBlogPost,
    "ColorStop": colorStop_1.ColorStop,
    "ContentCloneRequestVNext": contentCloneRequestVNext_1.ContentCloneRequestVNext,
    "ContentScheduleRequestVNext": contentScheduleRequestVNext_1.ContentScheduleRequestVNext,
    "ErrorDetail": errorDetail_1.ErrorDetail,
    "ForwardPaging": forwardPaging_1.ForwardPaging,
    "Gradient": gradient_1.Gradient,
    "LayoutSection": layoutSection_1.LayoutSection,
    "ModelError": modelError_1.ModelError,
    "NextPage": nextPage_1.NextPage,
    "Paging": paging_1.Paging,
    "PreviousPage": previousPage_1.PreviousPage,
    "RGBAColor": rGBAColor_1.RGBAColor,
    "RowMetaData": rowMetaData_1.RowMetaData,
    "SideOrCorner": sideOrCorner_1.SideOrCorner,
    "StandardError": standardError_1.StandardError,
    "Styles": styles_1.Styles,
    "VersionBlogPost": versionBlogPost_1.VersionBlogPost,
    "VersionUser": versionUser_1.VersionUser,
};
class ObjectSerializer {
    static findCorrectType(data, expectedType) {
        if (data == undefined) {
            return expectedType;
        }
        else if (primitives.indexOf(expectedType.toLowerCase()) !== -1) {
            return expectedType;
        }
        else if (expectedType === "Date") {
            return expectedType;
        }
        else {
            if (enumsMap[expectedType]) {
                return expectedType;
            }
            if (!typeMap[expectedType]) {
                return expectedType; // w/e we don't know the type
            }
            // Check the discriminator
            let discriminatorProperty = typeMap[expectedType].discriminator;
            if (discriminatorProperty == null) {
                return expectedType; // the type does not have a discriminator. use it.
            }
            else {
                if (data[discriminatorProperty]) {
                    var discriminatorType = data[discriminatorProperty];
                    if (typeMap[discriminatorType]) {
                        return discriminatorType; // use the type given in the discriminator
                    }
                    else {
                        return expectedType; // discriminator did not map to a type
                    }
                }
                else {
                    return expectedType; // discriminator was not present (or an empty string)
                }
            }
        }
    }
    static serialize(data, type) {
        if (data == undefined) {
            return data;
        }
        else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        }
        else if (type.lastIndexOf("Array<", 0) === 0) { // string.startsWith pre es6
            let subType = type.replace("Array<", ""); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            let transformedData = [];
            for (let index in data) {
                let date = data[index];
                transformedData.push(ObjectSerializer.serialize(date, subType));
            }
            return transformedData;
        }
        else if (type === "Date") {
            return data.toISOString();
        }
        else {
            if (enumsMap[type]) {
                return data;
            }
            if (!typeMap[type]) { // in case we dont know the type
                return data;
            }
            // Get the actual type of this object
            type = this.findCorrectType(data, type);
            // get the map for the correct type.
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            let instance = {};
            for (let index in attributeTypes) {
                let attributeType = attributeTypes[index];
                instance[attributeType.baseName] = ObjectSerializer.serialize(data[attributeType.name], attributeType.type);
            }
            return instance;
        }
    }
    static deserialize(data, type) {
        // polymorphism may change the actual type.
        type = ObjectSerializer.findCorrectType(data, type);
        if (data == undefined) {
            return data;
        }
        else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        }
        else if (type.lastIndexOf("Array<", 0) === 0) { // string.startsWith pre es6
            let subType = type.replace("Array<", ""); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            let transformedData = [];
            for (let index in data) {
                let date = data[index];
                transformedData.push(ObjectSerializer.deserialize(date, subType));
            }
            return transformedData;
        }
        else if (type === "Date") {
            return new Date(data);
        }
        else {
            if (enumsMap[type]) { // is Enum
                return data;
            }
            if (!typeMap[type]) { // dont know the type
                return data;
            }
            let instance = new typeMap[type]();
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            for (let index in attributeTypes) {
                let attributeType = attributeTypes[index];
                instance[attributeType.name] = ObjectSerializer.deserialize(data[attributeType.baseName], attributeType.type);
            }
            return instance;
        }
    }
}
exports.ObjectSerializer = ObjectSerializer;
class HttpBasicAuth {
    constructor() {
        this.username = '';
        this.password = '';
    }
    applyToRequest(requestOptions) {
        requestOptions.auth = {
            username: this.username, password: this.password
        };
    }
}
exports.HttpBasicAuth = HttpBasicAuth;
class HttpBearerAuth {
    constructor() {
        this.accessToken = '';
    }
    applyToRequest(requestOptions) {
        if (requestOptions && requestOptions.headers) {
            const accessToken = typeof this.accessToken === 'function'
                ? this.accessToken()
                : this.accessToken;
            requestOptions.headers["Authorization"] = "Bearer " + accessToken;
        }
    }
}
exports.HttpBearerAuth = HttpBearerAuth;
class ApiKeyAuth {
    constructor(location, paramName) {
        this.location = location;
        this.paramName = paramName;
        this.apiKey = '';
    }
    applyToRequest(requestOptions) {
        if (this.location == "query") {
            requestOptions.qs[this.paramName] = this.apiKey;
        }
        else if (this.location == "header" && requestOptions && requestOptions.headers) {
            requestOptions.headers[this.paramName] = this.apiKey;
        }
        else if (this.location == 'cookie' && requestOptions && requestOptions.headers) {
            if (requestOptions.headers['Cookie']) {
                requestOptions.headers['Cookie'] += '; ' + this.paramName + '=' + encodeURIComponent(this.apiKey);
            }
            else {
                requestOptions.headers['Cookie'] = this.paramName + '=' + encodeURIComponent(this.apiKey);
            }
        }
    }
}
exports.ApiKeyAuth = ApiKeyAuth;
class OAuth {
    constructor() {
        this.accessToken = '';
    }
    applyToRequest(requestOptions) {
        if (requestOptions && requestOptions.headers) {
            requestOptions.headers["Authorization"] = "Bearer " + this.accessToken;
        }
    }
}
exports.OAuth = OAuth;
class VoidAuth {
    constructor() {
        this.username = '';
        this.password = '';
    }
    applyToRequest(_) {
        // Do nothing
    }
}
exports.VoidAuth = VoidAuth;
