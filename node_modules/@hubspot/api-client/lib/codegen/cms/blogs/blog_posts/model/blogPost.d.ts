/**
 * Blog Post endpoints
 * \"Use these endpoints for interacting with Blog Posts, Blog Authors, and Blog Tags\"
 *
 * The version of the OpenAPI document: v3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { LayoutSection } from './layoutSection';
/**
* Model definition for a Blog Post.
*/
export declare class BlogPost {
    /**
    * The unique ID of the Blog Post.
    */
    'id': string;
    /**
    * The path of the this blog post. This field is appended to the domain to construct the url of this post.
    */
    'slug': string;
    /**
    * The ID of the parent Blog this Blog Post is associated with.
    */
    'contentGroupId': string;
    /**
    * The GUID of the marketing campaign this Blog Post is a part of.
    */
    'campaign': string;
    /**
    * ID of the type of object this is. Should always .
    */
    'categoryId': number;
    /**
    * An ENUM descibing the current state of this Blog Post.
    */
    'state': string;
    'templatePath': string;
    /**
    * The internal name of the blog post.
    */
    'name': string;
    'mabExperimentId': string;
    /**
    * If True, the post will not show up in your dashboard, although the post could still be live.
    */
    'archived': boolean;
    /**
    * The name of the user that updated this blog post.
    */
    'authorName': string;
    'abTestId': string;
    /**
    * The ID of the user that created this blog post.
    */
    'createdById': string;
    /**
    * The ID of the user that updated this blog post.
    */
    'updatedById': string;
    /**
    * The domain this Blog Post will resolve to. If null, the Blog Post will default to the domain of the ParentBlog.
    */
    'domain': string;
    'subcategory': string;
    'abStatus': BlogPost.AbStatusEnum;
    'folderId': string;
    /**
    * A data structure containing the data for all the modules inside the containers for this post. This will only be populated if the page has widget containers.
    */
    'widgetContainers': {
        [key: string]: object;
    };
    /**
    * A data structure containing the data for all the modules for this page.
    */
    'widgets': {
        [key: string]: object;
    };
    /**
    * The explicitly defined language of the Blog Post. If null, the Blog Post will default to the language of the ParentBlog.
    */
    'language': BlogPost.LanguageEnum;
    /**
    * ID of the primary blog post this object was translated from.
    */
    'translatedFromId': string;
    'dynamicPageHubDbTableId': string;
    /**
    * The ID of the Blog Author associated with this Blog Post.
    */
    'blogAuthorId': string;
    /**
    * List of IDs for the tags associated with this Blog Post.
    */
    'tagIds': Array<number>;
    /**
    * The HTML of the main post body.
    */
    'postBody': string;
    /**
    * The summary of the blog post that will appear on the main listing page.
    */
    'postSummary': string;
    /**
    * The contents of the RSS body for this Blog Post.
    */
    'rssBody': string;
    /**
    * The contents of the RSS summary for this Blog Post.
    */
    'rssSummary': string;
    /**
    * Boolean to allow overriding the AMP settings for the blog.
    */
    'enableGoogleAmpOutputOverride': boolean;
    /**
    * The html title of this Blog Post.
    */
    'htmlTitle': string;
    'pageRedirected': boolean;
    'pageExpiryEnabled': boolean;
    'pageExpiryDate': number;
    'pageExpiryRedirectId': number;
    'pageExpiryRedirectUrl': string;
    /**
    * Boolean to determine if this post should use a featuredImage.
    */
    'useFeaturedImage': boolean;
    /**
    * Set this to create a password protected page. Entering the password will be required to view the page.
    */
    'password': string;
    /**
    * List of stylesheets to attach to this blog post. These stylesheets are attached to just this page. Order of precedence is bottom to top, just like in the HTML.
    */
    'attachedStylesheets': Array<{
        [key: string]: object;
    }>;
    /**
    * Boolean to determine whether or not the Primary CSS Files should be applied.
    */
    'includeDefaultCustomCss': boolean;
    /**
    * Boolean to determine whether or not the styles from the template should be applied.
    */
    'enableDomainStylesheets': boolean;
    /**
    * Boolean to determine whether or not the styles from the template should be applied.
    */
    'enableLayoutStylesheets': boolean;
    /**
    * A description that goes in <meta> tag on the page.
    */
    'metaDescription': string;
    /**
    * Set this to true if you want to be published immediately when the schedule publish endpoint is called, and to ignore the publish_date setting.
    */
    'publishImmediately': boolean;
    /**
    * Custom HTML for embed codes, javascript, etc. that goes in the <head> tag of the page.
    */
    'headHtml': string;
    /**
    * Custom HTML for embed codes, javascript that should be placed before the </body> tag of the page.
    */
    'footerHtml': string;
    /**
    * An ENUM descibing the type of this object. Should always be BLOG_POST.
    */
    'contentTypeCategory': BlogPost.ContentTypeCategoryEnum;
    /**
    * A generated ENUM descibing the current state of this Blog Post. Should always match state.
    */
    'currentState': BlogPost.CurrentStateEnum;
    /**
    * Optional override to set the URL to be used in the rel=canonical link tag on the page.
    */
    'linkRelCanonicalUrl': string;
    /**
    * The featuredImage of this Blog Post.
    */
    'featuredImage': string;
    /**
    * Alt Text of the featuredImage.
    */
    'featuredImageAltText': string;
    /**
    * Boolean to determine whether or not to respect publicAccessRules.
    */
    'publicAccessRulesEnabled': boolean;
    /**
    * Rules for require member registration to access private content.
    */
    'publicAccessRules': Array<object>;
    'layoutSections': {
        [key: string]: LayoutSection;
    };
    'themeSettingsValues': {
        [key: string]: object;
    };
    /**
    * A generated field representing the URL of this blog post.
    */
    'url': string;
    /**
    * The date (ISO8601 format) the blog post is to be published at.
    */
    'publishDate': Date;
    /**
    * The timestamp (ISO8601 format) when this Blog Post was deleted.
    */
    'deletedAt': Date;
    /**
    * The timestamp (ISO8601 format) when this blog post was created.
    */
    'createdAt': Date;
    /**
    * Boolean describing if this Blog Post is published.
    */
    'published': boolean;
    /**
    * The timestamp (ISO8601 format) when this Blog Post was last updated.
    */
    'updatedAt': Date;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
export declare namespace BlogPost {
    enum AbStatusEnum {
        Master,
        Variant,
        LoserVariant,
        MabMaster,
        MabVariant,
        AutomatedMaster,
        AutomatedVariant,
        AutomatedLoserVariant
    }
    enum LanguageEnum {
        Af,
        AfNa,
        AfZa,
        Agq,
        AgqCm,
        Ak,
        AkGh,
        Am,
        AmEt,
        Ar,
        Ar001,
        ArAe,
        ArBh,
        ArDj,
        ArDz,
        ArEg,
        ArEh,
        ArEr,
        ArIl,
        ArIq,
        ArJo,
        ArKm,
        ArKw,
        ArLb,
        ArLy,
        ArMa,
        ArMr,
        ArOm,
        ArPs,
        ArQa,
        ArSa,
        ArSd,
        ArSo,
        ArSs,
        ArSy,
        ArTd,
        ArTn,
        ArYe,
        As,
        AsIn,
        Asa,
        AsaTz,
        Ast,
        AstEs,
        Az,
        AzAz,
        Bas,
        BasCm,
        Be,
        BeBy,
        Bem,
        BemZm,
        Bez,
        BezTz,
        Bg,
        BgBg,
        Bm,
        BmMl,
        Bn,
        BnBd,
        BnIn,
        Bo,
        BoCn,
        BoIn,
        Br,
        BrFr,
        Brx,
        BrxIn,
        Bs,
        BsBa,
        Ca,
        CaAd,
        CaEs,
        CaFr,
        CaIt,
        Ccp,
        CcpBd,
        CcpIn,
        Ce,
        CeRu,
        Cgg,
        CggUg,
        Chr,
        ChrUs,
        Ckb,
        CkbIq,
        CkbIr,
        Cs,
        CsCz,
        Cu,
        CuRu,
        Cy,
        CyGb,
        Da,
        DaDk,
        DaGl,
        Dav,
        DavKe,
        De,
        DeAt,
        DeBe,
        DeCh,
        DeDe,
        DeGr,
        DeIt,
        DeLi,
        DeLu,
        Dje,
        DjeNe,
        Dsb,
        DsbDe,
        Dua,
        DuaCm,
        Dyo,
        DyoSn,
        Dz,
        DzBt,
        Ebu,
        EbuKe,
        Ee,
        EeGh,
        EeTg,
        El,
        ElCy,
        ElGr,
        En,
        En001,
        En150,
        EnAg,
        EnAi,
        EnAs,
        EnAt,
        EnAu,
        EnBb,
        EnBe,
        EnBi,
        EnBm,
        EnBs,
        EnBw,
        EnBz,
        EnCa,
        EnCc,
        EnCh,
        EnCk,
        EnCm,
        EnCx,
        EnCy,
        EnDe,
        EnDg,
        EnDk,
        EnDm,
        EnEr,
        EnFi,
        EnFj,
        EnFk,
        EnFm,
        EnGb,
        EnGd,
        EnGg,
        EnGh,
        EnGi,
        EnGm,
        EnGu,
        EnGy,
        EnHk,
        EnIe,
        EnIl,
        EnIm,
        EnIn,
        EnIo,
        EnJe,
        EnJm,
        EnKe,
        EnKi,
        EnKn,
        EnKy,
        EnLc,
        EnLr,
        EnLs,
        EnMg,
        EnMh,
        EnMo,
        EnMp,
        EnMs,
        EnMt,
        EnMu,
        EnMw,
        EnMy,
        EnNa,
        EnNf,
        EnNg,
        EnNl,
        EnNr,
        EnNu,
        EnNz,
        EnPg,
        EnPh,
        EnPk,
        EnPn,
        EnPr,
        EnPw,
        EnRw,
        EnSb,
        EnSc,
        EnSd,
        EnSe,
        EnSg,
        EnSh,
        EnSi,
        EnSl,
        EnSs,
        EnSx,
        EnSz,
        EnTc,
        EnTk,
        EnTo,
        EnTt,
        EnTv,
        EnTz,
        EnUg,
        EnUm,
        EnUs,
        EnVc,
        EnVg,
        EnVi,
        EnVu,
        EnWs,
        EnZa,
        EnZm,
        EnZw,
        Eo,
        Eo001,
        Es,
        Es419,
        EsAr,
        EsBo,
        EsBr,
        EsBz,
        EsCl,
        EsCo,
        EsCr,
        EsCu,
        EsDo,
        EsEa,
        EsEc,
        EsEs,
        EsGq,
        EsGt,
        EsHn,
        EsIc,
        EsMx,
        EsNi,
        EsPa,
        EsPe,
        EsPh,
        EsPr,
        EsPy,
        EsSv,
        EsUs,
        EsUy,
        EsVe,
        Et,
        EtEe,
        Eu,
        EuEs,
        Ewo,
        EwoCm,
        Fa,
        FaAf,
        FaIr,
        Ff,
        FfCm,
        FfGn,
        FfMr,
        FfSn,
        Fi,
        FiFi,
        Fil,
        FilPh,
        Fo,
        FoDk,
        FoFo,
        Fr,
        FrBe,
        FrBf,
        FrBi,
        FrBj,
        FrBl,
        FrCa,
        FrCd,
        FrCf,
        FrCg,
        FrCh,
        FrCi,
        FrCm,
        FrDj,
        FrDz,
        FrFr,
        FrGa,
        FrGf,
        FrGn,
        FrGp,
        FrGq,
        FrHt,
        FrKm,
        FrLu,
        FrMa,
        FrMc,
        FrMf,
        FrMg,
        FrMl,
        FrMq,
        FrMr,
        FrMu,
        FrNc,
        FrNe,
        FrPf,
        FrPm,
        FrRe,
        FrRw,
        FrSc,
        FrSn,
        FrSy,
        FrTd,
        FrTg,
        FrTn,
        FrVu,
        FrWf,
        FrYt,
        Fur,
        FurIt,
        Fy,
        FyNl,
        Ga,
        GaIe,
        Gd,
        GdGb,
        Gl,
        GlEs,
        Gsw,
        GswCh,
        GswFr,
        GswLi,
        Gu,
        GuIn,
        Guz,
        GuzKe,
        Gv,
        GvIm,
        Ha,
        HaGh,
        HaNe,
        HaNg,
        Haw,
        HawUs,
        He,
        Hi,
        HiIn,
        Hr,
        HrBa,
        HrHr,
        Hsb,
        HsbDe,
        Hu,
        HuHu,
        Hy,
        HyAm,
        Id,
        Ig,
        IgNg,
        Ii,
        IiCn,
        IdId,
        Is,
        IsIs,
        It,
        ItCh,
        ItIt,
        ItSm,
        ItVa,
        HeIl,
        Ja,
        JaJp,
        Jgo,
        JgoCm,
        Yi,
        Yi001,
        Jmc,
        JmcTz,
        Ka,
        KaGe,
        Kab,
        KabDz,
        Kam,
        KamKe,
        Kde,
        KdeTz,
        Kea,
        KeaCv,
        Khq,
        KhqMl,
        Ki,
        KiKe,
        Kk,
        KkKz,
        Kkj,
        KkjCm,
        Kl,
        KlGl,
        Kln,
        KlnKe,
        Km,
        KmKh,
        Kn,
        KnIn,
        Ko,
        KoKp,
        KoKr,
        Kok,
        KokIn,
        Ks,
        KsIn,
        Ksb,
        KsbTz,
        Ksf,
        KsfCm,
        Ksh,
        KshDe,
        Kw,
        KwGb,
        Ky,
        KyKg,
        Lag,
        LagTz,
        Lb,
        LbLu,
        Lg,
        LgUg,
        Lkt,
        LktUs,
        Ln,
        LnAo,
        LnCd,
        LnCf,
        LnCg,
        Lo,
        LoLa,
        Lrc,
        LrcIq,
        LrcIr,
        Lt,
        LtLt,
        Lu,
        LuCd,
        Luo,
        LuoKe,
        Luy,
        LuyKe,
        Lv,
        LvLv,
        Mas,
        MasKe,
        MasTz,
        Mer,
        MerKe,
        Mfe,
        MfeMu,
        Mg,
        MgMg,
        Mgh,
        MghMz,
        Mgo,
        MgoCm,
        Mk,
        MkMk,
        Ml,
        MlIn,
        Mn,
        MnMn,
        Mr,
        MrIn,
        Ms,
        MsBn,
        MsMy,
        MsSg,
        Mt,
        MtMt,
        Mua,
        MuaCm,
        My,
        MyMm,
        Mzn,
        MznIr,
        Naq,
        NaqNa,
        Nb,
        NbNo,
        NbSj,
        Nd,
        NdZw,
        Nds,
        NdsDe,
        NdsNl,
        Ne,
        NeIn,
        NeNp,
        Nl,
        NlAw,
        NlBe,
        NlBq,
        NlCw,
        NlNl,
        NlSr,
        NlSx,
        Nmg,
        NmgCm,
        Nn,
        NnNo,
        Nnh,
        NnhCm,
        No,
        NoNo,
        Nus,
        NusSs,
        Nyn,
        NynUg,
        Om,
        OmEt,
        OmKe,
        Or,
        OrIn,
        Os,
        OsGe,
        OsRu,
        Pa,
        PaIn,
        PaPk,
        Pl,
        PlPl,
        Prg,
        Prg001,
        Ps,
        PsAf,
        Pt,
        PtAo,
        PtBr,
        PtCh,
        PtCv,
        PtGq,
        PtGw,
        PtLu,
        PtMo,
        PtMz,
        PtPt,
        PtSt,
        PtTl,
        Qu,
        QuBo,
        QuEc,
        QuPe,
        Rm,
        RmCh,
        Rn,
        RnBi,
        Ro,
        RoMd,
        RoRo,
        Rof,
        RofTz,
        Ru,
        RuBy,
        RuKg,
        RuKz,
        RuMd,
        RuRu,
        RuUa,
        Rw,
        RwRw,
        Rwk,
        RwkTz,
        Sa,
        Sah,
        SahRu,
        Saq,
        SaqKe,
        Sbp,
        SbpTz,
        Sd,
        SdPk,
        Se,
        SeFi,
        SeNo,
        SeSe,
        Seh,
        SehMz,
        Ses,
        SesMl,
        Sg,
        SgCf,
        Shi,
        ShiMa,
        Si,
        SiLk,
        Sk,
        SkSk,
        Sl,
        SlSi,
        Smn,
        SmnFi,
        Sn,
        SnZw,
        So,
        SoDj,
        SoEt,
        SoKe,
        SoSo,
        Sq,
        SqAl,
        SqMk,
        SqXk,
        Sr,
        SrBa,
        SrCs,
        SrMe,
        SrRs,
        SrXk,
        Sv,
        SvAx,
        SvFi,
        SvSe,
        Sw,
        SwCd,
        SwKe,
        SwTz,
        SwUg,
        Sy,
        Ta,
        TaIn,
        TaLk,
        TaMy,
        TaSg,
        Te,
        TeIn,
        Teo,
        TeoKe,
        TeoUg,
        Tg,
        TgTj,
        Th,
        ThTh,
        Ti,
        TiEr,
        TiEt,
        Tk,
        TkTm,
        To,
        ToTo,
        Tr,
        TrCy,
        TrTr,
        Tt,
        TtRu,
        Twq,
        TwqNe,
        Tzm,
        TzmMa,
        Ug,
        UgCn,
        Uk,
        UkUa,
        Ur,
        UrIn,
        UrPk,
        Uz,
        UzAf,
        UzUz,
        Vai,
        VaiLr,
        Vi,
        ViVn,
        Vo,
        Vo001,
        Vun,
        VunTz,
        Wae,
        WaeCh,
        Wo,
        WoSn,
        Xog,
        XogUg,
        Yav,
        YavCm,
        Yo,
        YoBj,
        YoNg,
        Yue,
        YueCn,
        YueHk,
        Zgh,
        ZghMa,
        Zh,
        ZhCn,
        ZhHk,
        ZhMo,
        ZhSg,
        ZhTw,
        ZhHans,
        ZhHant,
        Zu,
        ZuZa
    }
    enum ContentTypeCategoryEnum {
        _0,
        _1,
        _2,
        _3,
        _4,
        _5,
        _6,
        _7
    }
    enum CurrentStateEnum {
        AUTOMATED,
        AUTOMATEDDRAFT,
        AUTOMATEDSENDING,
        AUTOMATEDFORFORM,
        AUTOMATEDFORFORMBUFFER,
        AUTOMATEDFORFORMDRAFT,
        AUTOMATEDFORFORMLEGACY,
        BLOGEMAILDRAFT,
        BLOGEMAILPUBLISHED,
        DRAFT,
        DRAFTAB,
        DRAFTABVARIANT,
        ERROR,
        LOSERABVARIANT,
        PAGESTUB,
        PREPROCESSING,
        PROCESSING,
        PUBLISHED,
        PUBLISHEDAB,
        PUBLISHEDABVARIANT,
        PUBLISHEDORSCHEDULED,
        RSSTOEMAILDRAFT,
        RSSTOEMAILPUBLISHED,
        SCHEDULED,
        SCHEDULEDAB,
        SCHEDULEDORPUBLISHED,
        AUTOMATEDAB,
        AUTOMATEDABVARIANT,
        AUTOMATEDDRAFTAB,
        AUTOMATEDDRAFTABVARIANT,
        AUTOMATEDLOSERABVARIANT
    }
}
