export * from './batchInputHubDbTableRowV3';
export * from './batchInputJsonNode';
export * from './batchInputString';
export * from './batchResponseHubDbTableRowV3WithErrors';
export * from './collectionResponseWithTotalHubDbTableRowV3ForwardPaging';
export * from './collectionResponseWithTotalHubDbTableV3ForwardPaging';
export * from './column';
export * from './columnInput';
export * from './errorDetail';
export * from './foreignId';
export * from './forwardPaging';
export * from './hubDbTableCloneRequest';
export * from './hubDbTableRowV3';
export * from './hubDbTableRowV3Input';
export * from './hubDbTableV3';
export * from './hubDbTableV3Input';
export * from './hubDbTableV3LiveInput';
export * from './importResult';
export * from './modelError';
export * from './nextPage';
export * from './option';
export * from './simpleUser';
export * from './standardError';
import localVarRequest = require('request');
export declare class ObjectSerializer {
    static findCorrectType(data: any, expectedType: string): any;
    static serialize(data: any, type: string): any;
    static deserialize(data: any, type: string): any;
}
export interface Authentication {
    /**
    * Apply authentication settings to header and query params.
    */
    applyToRequest(requestOptions: localVarRequest.Options): Promise<void> | void;
}
export declare class HttpBasicAuth implements Authentication {
    username: string;
    password: string;
    applyToRequest(requestOptions: localVarRequest.Options): void;
}
export declare class HttpBearerAuth implements Authentication {
    accessToken: string | (() => string);
    applyToRequest(requestOptions: localVarRequest.Options): void;
}
export declare class ApiKeyAuth implements Authentication {
    private location;
    private paramName;
    apiKey: string;
    constructor(location: string, paramName: string);
    applyToRequest(requestOptions: localVarRequest.Options): void;
}
export declare class OAuth implements Authentication {
    accessToken: string;
    applyToRequest(requestOptions: localVarRequest.Options): void;
}
export declare class VoidAuth implements Authentication {
    username: string;
    password: string;
    applyToRequest(_: localVarRequest.Options): void;
}
export declare type Interceptor = (requestOptions: localVarRequest.Options) => (Promise<void> | void);
