/**
 * URL redirects
 * URL redirect operations
 *
 * The version of the OpenAPI document: v3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
export declare class UrlMapping {
    /**
    * The unique ID of this URL redirect.
    */
    'id': number;
    'portalId': number;
    'created': number;
    'updated': number;
    'createdById': number;
    'updatedById': number;
    /**
    * The target incoming URL, path, or pattern to match for redirection.
    */
    'routePrefix': string;
    /**
    * The destination URL, where the target URL should be redirected if it matches the `routePrefix`.
    */
    'destination': string;
    /**
    * The type of redirect to create. Options include: 301 (permanent), 302 (temporary), or 305 (proxy). Find more details [here](https://knowledge.hubspot.com/cos-general/how-to-redirect-a-hubspot-page).
    */
    'redirectStyle': number;
    'contentGroupId': number;
    /**
    * Whether the URL redirect mapping should apply only if a live page on the URL isn\'t found. If False, the URL redirect mapping will take precedence over any existing page.
    */
    'isOnlyAfterNotFound': boolean;
    'isRegex': boolean;
    /**
    * Whether the `routePrefix` should match on the entire URL, including the domain.
    */
    'isMatchFullUrl': boolean;
    /**
    * Whether the `routePrefix` should match on the entire URL path, including the query string.
    */
    'isMatchQueryString': boolean;
    /**
    * Whether the `routePrefix` should match based on pattern.
    */
    'isPattern': boolean;
    /**
    * Whether a trailing slash will be ignored.
    */
    'isTrailingSlashOptional': boolean;
    /**
    * Whether the `routePrefix` should match both HTTP and HTTPS protocols.
    */
    'isProtocolAgnostic': boolean;
    'name': string;
    /**
    * Used to prioritize URL redirection. If a given URL matches more than one redirect, the one with the **lower** precedence will be used.
    */
    'precedence': number;
    'deletedAt': number;
    'note': string;
    'label': string;
    'internallyCreated': boolean;
    'cosObjectType': UrlMapping.CosObjectTypeEnum;
    'cdnPurgeEmbargoTime': number;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
export declare namespace UrlMapping {
    enum CosObjectTypeEnum {
        CONTENT,
        EXTENSIONRESOURCE,
        LAYOUT,
        CUSTOMWIDGET,
        WIDGET,
        FORM,
        PLACEMENT,
        IMAGE,
        DOMAINSETTINGS,
        SITESETTINGS,
        EMAILADDRESS,
        WORKFLOW,
        HUBDBTABLE,
        REDIRECTURL,
        DESIGNFOLDER,
        SITEMAP,
        DOMAIN,
        BLOG,
        FILE,
        FOLDER,
        SITEMENU,
        THEME,
        CONTENTGROUP,
        FOLLOWME,
        KNOWLEDGEBASE,
        LISTMEMBERSHIP,
        CONTACTMEMBERSHIP,
        PASSWORDPROTECTED,
        UNRESTRICTEDACCESS,
        MARKETPLACELISTING,
        LAYOUTSECTION,
        THEMESETTINGS,
        VIDEOPLAYER,
        URLMAPPING,
        KNOWLEDGECATEGORY,
        KNOWLEDGEHOMEPAGECATEGORY,
        RAWASSET,
        GLOBALCONTENT,
        HUBDBTABLEROW,
        BLOGAUTHOR,
        SERVERLESSFUNCTION,
        KNOWLEDGECATEGORYTRANSLATION
    }
}
