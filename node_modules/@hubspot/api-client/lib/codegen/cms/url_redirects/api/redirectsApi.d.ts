/**
 * URL redirects
 * URL redirect operations
 *
 * The version of the OpenAPI document: v3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/// <reference types="node" />
import http = require('http');
import { CollectionResponseWithTotalUrlMapping } from '../model/collectionResponseWithTotalUrlMapping';
import { UrlMapping } from '../model/urlMapping';
import { UrlMappingCreateRequestBody } from '../model/urlMappingCreateRequestBody';
import { Authentication, Interceptor } from '../model/models';
import { ApiKeyAuth, OAuth } from '../model/models';
export declare enum RedirectsApiApiKeys {
    hapikey = 0
}
export declare class RedirectsApi {
    protected _basePath: string;
    protected _defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        hapikey: ApiKeyAuth;
        oauth2: OAuth;
    };
    protected interceptors: Interceptor[];
    constructor(basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    set defaultHeaders(defaultHeaders: any);
    get defaultHeaders(): any;
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: RedirectsApiApiKeys, value: string): void;
    set accessToken(token: string);
    addInterceptor(interceptor: Interceptor): void;
    /**
     * Delete one existing redirect, so it is no longer mapped.
     * @summary Delete a redirect
     * @param urlRedirectId The ID of the target redirect.
     */
    archive(urlRedirectId: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    /**
     * Creates and configures a new URL redirect.
     * @summary Create a redirect
     * @param urlMappingCreateRequestBody
     */
    create(urlMappingCreateRequestBody?: UrlMappingCreateRequestBody, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: UrlMapping;
    }>;
    /**
     * Returns the details for a single existing URL redirect by ID.
     * @summary Get details for a redirect
     * @param urlRedirectId The ID of the target redirect.
     */
    getById(urlRedirectId: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: UrlMapping;
    }>;
    /**
     * Returns all existing URL redirects. Results can be limited and filtered by creation or updated date.
     * @summary Get current redirects
     * @param createdAt Only return redirects created on exactly this date.
     * @param createdAfter Only return redirects created after this date.
     * @param createdBefore Only return redirects created before this date.
     * @param updatedAt Only return redirects last updated on exactly this date.
     * @param updatedAfter Only return redirects last updated after this date.
     * @param updatedBefore Only return redirects last updated before this date.
     * @param sort
     * @param properties
     * @param after The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results.
     * @param before
     * @param limit Maximum number of result per page
     * @param archived Whether to return only results that have been archived.
     */
    getPage(createdAt?: Date, createdAfter?: Date, createdBefore?: Date, updatedAt?: Date, updatedAfter?: Date, updatedBefore?: Date, sort?: Array<string>, properties?: Array<string>, after?: string, before?: string, limit?: number, archived?: boolean, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: CollectionResponseWithTotalUrlMapping;
    }>;
    /**
     * Updates the settings for an existing URL redirect.
     * @summary Update a redirect
     * @param urlRedirectId
     * @param urlMapping
     */
    update(urlRedirectId: string, urlMapping?: UrlMapping, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: UrlMapping;
    }>;
}
