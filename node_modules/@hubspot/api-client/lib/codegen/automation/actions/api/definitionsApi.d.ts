/**
 * Custom Workflow Actions
 * Create custom workflow actions
 *
 * The version of the OpenAPI document: v4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/// <reference types="node" />
import http = require('http');
import { CollectionResponseExtensionActionDefinitionForwardPaging } from '../model/collectionResponseExtensionActionDefinitionForwardPaging';
import { ExtensionActionDefinition } from '../model/extensionActionDefinition';
import { ExtensionActionDefinitionInput } from '../model/extensionActionDefinitionInput';
import { ExtensionActionDefinitionPatch } from '../model/extensionActionDefinitionPatch';
import { Authentication, Interceptor } from '../model/models';
import { ApiKeyAuth } from '../model/models';
export declare enum DefinitionsApiApiKeys {
    developer_hapikey = 0
}
export declare class DefinitionsApi {
    protected _basePath: string;
    protected _defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        developer_hapikey: ApiKeyAuth;
    };
    protected interceptors: Interceptor[];
    constructor(basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    set defaultHeaders(defaultHeaders: any);
    get defaultHeaders(): any;
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: DefinitionsApiApiKeys, value: string): void;
    addInterceptor(interceptor: Interceptor): void;
    /**
     * Archives a single custom workflow action with the specified ID. Workflows that currently use this custom action will stop attempting to execute the action, and all future executions will be marked as a failure.
     * @summary Archive a custom action
     * @param definitionId The ID of the custom workflow action.
     * @param appId
     */
    archive(definitionId: string, appId: number, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    /**
     * Creates a new custom workflow action.
     * @summary Create new custom action
     * @param appId
     * @param extensionActionDefinitionInput The custom workflow action to create.
     */
    create(appId: number, extensionActionDefinitionInput: ExtensionActionDefinitionInput, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: ExtensionActionDefinition;
    }>;
    /**
     * Returns a single custom workflow action with the specified ID.
     * @summary Get a custom action
     * @param definitionId The ID of the custom workflow action.
     * @param appId
     * @param archived Whether to include archived custom actions.
     */
    getById(definitionId: string, appId: number, archived?: boolean, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: ExtensionActionDefinition;
    }>;
    /**
     * Returns a list of all custom workflow actions.
     * @summary Get all custom actions
     * @param appId
     * @param limit Maximum number of results per page.
     * @param after The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results.
     * @param archived Whether to include archived custom actions.
     */
    getPage(appId: number, limit?: number, after?: string, archived?: boolean, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: CollectionResponseExtensionActionDefinitionForwardPaging;
    }>;
    /**
     * Updates a custom workflow action with new values for the specified fields.
     * @summary Update a custom action
     * @param definitionId The ID of the custom workflow action.
     * @param appId
     * @param extensionActionDefinitionPatch The custom workflow action fields to be updated.
     */
    update(definitionId: string, appId: number, extensionActionDefinitionPatch: ExtensionActionDefinitionPatch, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: ExtensionActionDefinition;
    }>;
}
