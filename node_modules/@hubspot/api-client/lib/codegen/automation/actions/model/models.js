"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VoidAuth = exports.OAuth = exports.ApiKeyAuth = exports.HttpBearerAuth = exports.HttpBasicAuth = exports.ObjectSerializer = void 0;
__exportStar(require("./actionFunction"), exports);
__exportStar(require("./actionFunctionIdentifier"), exports);
__exportStar(require("./actionLabels"), exports);
__exportStar(require("./actionRevision"), exports);
__exportStar(require("./batchInputCallbackCompletionBatchRequest"), exports);
__exportStar(require("./callbackCompletionBatchRequest"), exports);
__exportStar(require("./callbackCompletionRequest"), exports);
__exportStar(require("./collectionResponseActionFunctionIdentifierNoPaging"), exports);
__exportStar(require("./collectionResponseActionRevisionForwardPaging"), exports);
__exportStar(require("./collectionResponseExtensionActionDefinitionForwardPaging"), exports);
__exportStar(require("./conditionalSingleFieldDependency"), exports);
__exportStar(require("./errorDetail"), exports);
__exportStar(require("./extensionActionDefinition"), exports);
__exportStar(require("./extensionActionDefinitionInput"), exports);
__exportStar(require("./extensionActionDefinitionPatch"), exports);
__exportStar(require("./fieldTypeDefinition"), exports);
__exportStar(require("./forwardPaging"), exports);
__exportStar(require("./inputFieldDefinition"), exports);
__exportStar(require("./modelError"), exports);
__exportStar(require("./nextPage"), exports);
__exportStar(require("./objectRequestOptions"), exports);
__exportStar(require("./option"), exports);
__exportStar(require("./singleFieldDependency"), exports);
const actionFunction_1 = require("./actionFunction");
const actionFunctionIdentifier_1 = require("./actionFunctionIdentifier");
const actionLabels_1 = require("./actionLabels");
const actionRevision_1 = require("./actionRevision");
const batchInputCallbackCompletionBatchRequest_1 = require("./batchInputCallbackCompletionBatchRequest");
const callbackCompletionBatchRequest_1 = require("./callbackCompletionBatchRequest");
const callbackCompletionRequest_1 = require("./callbackCompletionRequest");
const collectionResponseActionFunctionIdentifierNoPaging_1 = require("./collectionResponseActionFunctionIdentifierNoPaging");
const collectionResponseActionRevisionForwardPaging_1 = require("./collectionResponseActionRevisionForwardPaging");
const collectionResponseExtensionActionDefinitionForwardPaging_1 = require("./collectionResponseExtensionActionDefinitionForwardPaging");
const conditionalSingleFieldDependency_1 = require("./conditionalSingleFieldDependency");
const errorDetail_1 = require("./errorDetail");
const extensionActionDefinition_1 = require("./extensionActionDefinition");
const extensionActionDefinitionInput_1 = require("./extensionActionDefinitionInput");
const extensionActionDefinitionPatch_1 = require("./extensionActionDefinitionPatch");
const fieldTypeDefinition_1 = require("./fieldTypeDefinition");
const forwardPaging_1 = require("./forwardPaging");
const inputFieldDefinition_1 = require("./inputFieldDefinition");
const modelError_1 = require("./modelError");
const nextPage_1 = require("./nextPage");
const objectRequestOptions_1 = require("./objectRequestOptions");
const option_1 = require("./option");
const singleFieldDependency_1 = require("./singleFieldDependency");
/* tslint:disable:no-unused-variable */
let primitives = [
    "string",
    "boolean",
    "double",
    "integer",
    "long",
    "float",
    "number",
    "any"
];
let enumsMap = {
    "ActionFunction.FunctionTypeEnum": actionFunction_1.ActionFunction.FunctionTypeEnum,
    "ActionFunctionIdentifier.FunctionTypeEnum": actionFunctionIdentifier_1.ActionFunctionIdentifier.FunctionTypeEnum,
    "ConditionalSingleFieldDependency.DependencyTypeEnum": conditionalSingleFieldDependency_1.ConditionalSingleFieldDependency.DependencyTypeEnum,
    "FieldTypeDefinition.TypeEnum": fieldTypeDefinition_1.FieldTypeDefinition.TypeEnum,
    "FieldTypeDefinition.FieldTypeEnum": fieldTypeDefinition_1.FieldTypeDefinition.FieldTypeEnum,
    "FieldTypeDefinition.ReferencedObjectTypeEnum": fieldTypeDefinition_1.FieldTypeDefinition.ReferencedObjectTypeEnum,
    "InputFieldDefinition.SupportedValueTypesEnum": inputFieldDefinition_1.InputFieldDefinition.SupportedValueTypesEnum,
    "SingleFieldDependency.DependencyTypeEnum": singleFieldDependency_1.SingleFieldDependency.DependencyTypeEnum,
};
let typeMap = {
    "ActionFunction": actionFunction_1.ActionFunction,
    "ActionFunctionIdentifier": actionFunctionIdentifier_1.ActionFunctionIdentifier,
    "ActionLabels": actionLabels_1.ActionLabels,
    "ActionRevision": actionRevision_1.ActionRevision,
    "BatchInputCallbackCompletionBatchRequest": batchInputCallbackCompletionBatchRequest_1.BatchInputCallbackCompletionBatchRequest,
    "CallbackCompletionBatchRequest": callbackCompletionBatchRequest_1.CallbackCompletionBatchRequest,
    "CallbackCompletionRequest": callbackCompletionRequest_1.CallbackCompletionRequest,
    "CollectionResponseActionFunctionIdentifierNoPaging": collectionResponseActionFunctionIdentifierNoPaging_1.CollectionResponseActionFunctionIdentifierNoPaging,
    "CollectionResponseActionRevisionForwardPaging": collectionResponseActionRevisionForwardPaging_1.CollectionResponseActionRevisionForwardPaging,
    "CollectionResponseExtensionActionDefinitionForwardPaging": collectionResponseExtensionActionDefinitionForwardPaging_1.CollectionResponseExtensionActionDefinitionForwardPaging,
    "ConditionalSingleFieldDependency": conditionalSingleFieldDependency_1.ConditionalSingleFieldDependency,
    "ErrorDetail": errorDetail_1.ErrorDetail,
    "ExtensionActionDefinition": extensionActionDefinition_1.ExtensionActionDefinition,
    "ExtensionActionDefinitionInput": extensionActionDefinitionInput_1.ExtensionActionDefinitionInput,
    "ExtensionActionDefinitionPatch": extensionActionDefinitionPatch_1.ExtensionActionDefinitionPatch,
    "FieldTypeDefinition": fieldTypeDefinition_1.FieldTypeDefinition,
    "ForwardPaging": forwardPaging_1.ForwardPaging,
    "InputFieldDefinition": inputFieldDefinition_1.InputFieldDefinition,
    "ModelError": modelError_1.ModelError,
    "NextPage": nextPage_1.NextPage,
    "ObjectRequestOptions": objectRequestOptions_1.ObjectRequestOptions,
    "Option": option_1.Option,
    "SingleFieldDependency": singleFieldDependency_1.SingleFieldDependency,
};
class ObjectSerializer {
    static findCorrectType(data, expectedType) {
        if (data == undefined) {
            return expectedType;
        }
        else if (primitives.indexOf(expectedType.toLowerCase()) !== -1) {
            return expectedType;
        }
        else if (expectedType === "Date") {
            return expectedType;
        }
        else {
            if (enumsMap[expectedType]) {
                return expectedType;
            }
            if (!typeMap[expectedType]) {
                return expectedType; // w/e we don't know the type
            }
            // Check the discriminator
            let discriminatorProperty = typeMap[expectedType].discriminator;
            if (discriminatorProperty == null) {
                return expectedType; // the type does not have a discriminator. use it.
            }
            else {
                if (data[discriminatorProperty]) {
                    var discriminatorType = data[discriminatorProperty];
                    if (typeMap[discriminatorType]) {
                        return discriminatorType; // use the type given in the discriminator
                    }
                    else {
                        return expectedType; // discriminator did not map to a type
                    }
                }
                else {
                    return expectedType; // discriminator was not present (or an empty string)
                }
            }
        }
    }
    static serialize(data, type) {
        if (data == undefined) {
            return data;
        }
        else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        }
        else if (type.lastIndexOf("Array<", 0) === 0) { // string.startsWith pre es6
            let subType = type.replace("Array<", ""); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            let transformedData = [];
            for (let index in data) {
                let date = data[index];
                transformedData.push(ObjectSerializer.serialize(date, subType));
            }
            return transformedData;
        }
        else if (type === "Date") {
            return data.toISOString();
        }
        else {
            if (enumsMap[type]) {
                return data;
            }
            if (!typeMap[type]) { // in case we dont know the type
                return data;
            }
            // Get the actual type of this object
            type = this.findCorrectType(data, type);
            // get the map for the correct type.
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            let instance = {};
            for (let index in attributeTypes) {
                let attributeType = attributeTypes[index];
                instance[attributeType.baseName] = ObjectSerializer.serialize(data[attributeType.name], attributeType.type);
            }
            return instance;
        }
    }
    static deserialize(data, type) {
        // polymorphism may change the actual type.
        type = ObjectSerializer.findCorrectType(data, type);
        if (data == undefined) {
            return data;
        }
        else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        }
        else if (type.lastIndexOf("Array<", 0) === 0) { // string.startsWith pre es6
            let subType = type.replace("Array<", ""); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            let transformedData = [];
            for (let index in data) {
                let date = data[index];
                transformedData.push(ObjectSerializer.deserialize(date, subType));
            }
            return transformedData;
        }
        else if (type === "Date") {
            return new Date(data);
        }
        else {
            if (enumsMap[type]) { // is Enum
                return data;
            }
            if (!typeMap[type]) { // dont know the type
                return data;
            }
            let instance = new typeMap[type]();
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            for (let index in attributeTypes) {
                let attributeType = attributeTypes[index];
                instance[attributeType.name] = ObjectSerializer.deserialize(data[attributeType.baseName], attributeType.type);
            }
            return instance;
        }
    }
}
exports.ObjectSerializer = ObjectSerializer;
class HttpBasicAuth {
    constructor() {
        this.username = '';
        this.password = '';
    }
    applyToRequest(requestOptions) {
        requestOptions.auth = {
            username: this.username, password: this.password
        };
    }
}
exports.HttpBasicAuth = HttpBasicAuth;
class HttpBearerAuth {
    constructor() {
        this.accessToken = '';
    }
    applyToRequest(requestOptions) {
        if (requestOptions && requestOptions.headers) {
            const accessToken = typeof this.accessToken === 'function'
                ? this.accessToken()
                : this.accessToken;
            requestOptions.headers["Authorization"] = "Bearer " + accessToken;
        }
    }
}
exports.HttpBearerAuth = HttpBearerAuth;
class ApiKeyAuth {
    constructor(location, paramName) {
        this.location = location;
        this.paramName = paramName;
        this.apiKey = '';
    }
    applyToRequest(requestOptions) {
        if (this.location == "query") {
            requestOptions.qs[this.paramName] = this.apiKey;
        }
        else if (this.location == "header" && requestOptions && requestOptions.headers) {
            requestOptions.headers[this.paramName] = this.apiKey;
        }
        else if (this.location == 'cookie' && requestOptions && requestOptions.headers) {
            if (requestOptions.headers['Cookie']) {
                requestOptions.headers['Cookie'] += '; ' + this.paramName + '=' + encodeURIComponent(this.apiKey);
            }
            else {
                requestOptions.headers['Cookie'] = this.paramName + '=' + encodeURIComponent(this.apiKey);
            }
        }
    }
}
exports.ApiKeyAuth = ApiKeyAuth;
class OAuth {
    constructor() {
        this.accessToken = '';
    }
    applyToRequest(requestOptions) {
        if (requestOptions && requestOptions.headers) {
            requestOptions.headers["Authorization"] = "Bearer " + this.accessToken;
        }
    }
}
exports.OAuth = OAuth;
class VoidAuth {
    constructor() {
        this.username = '';
        this.password = '';
    }
    applyToRequest(_) {
        // Do nothing
    }
}
exports.VoidAuth = VoidAuth;
