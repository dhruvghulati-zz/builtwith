/**
 * CRM Pipelines
 * Pipelines represent distinct stages in a workflow, like closing a deal or servicing a support ticket. These endpoints provide access to read and modify pipelines in HubSpot. Pipelines support `deals` and `tickets` object types.  ## Pipeline ID validation  When calling endpoints that take pipelineId as a parameter, that ID must correspond to an existing, un-archived pipeline. Otherwise the request will fail with a `404 Not Found` response.
 *
 * The version of the OpenAPI document: v3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/// <reference types="node" />
import http = require('http');
import { CollectionResponsePipelineStage } from '../model/collectionResponsePipelineStage';
import { PipelineStage } from '../model/pipelineStage';
import { PipelineStageInput } from '../model/pipelineStageInput';
import { PipelineStagePatchInput } from '../model/pipelineStagePatchInput';
import { Authentication, Interceptor } from '../model/models';
import { ApiKeyAuth, OAuth } from '../model/models';
export declare enum PipelineStagesApiApiKeys {
    hapikey = 0
}
export declare class PipelineStagesApi {
    protected _basePath: string;
    protected _defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        hapikey: ApiKeyAuth;
        oauth2: OAuth;
    };
    protected interceptors: Interceptor[];
    constructor(basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    set defaultHeaders(defaultHeaders: any);
    get defaultHeaders(): any;
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: PipelineStagesApiApiKeys, value: string): void;
    set accessToken(token: string);
    addInterceptor(interceptor: Interceptor): void;
    /**
     * Archive the pipeline stage identified by `{stageId}` associated with the pipeline identified by `{pipelineId}`.
     * @summary Archive a pipeline stage
     * @param objectType
     * @param pipelineId
     * @param stageId
     */
    archive(objectType: string, pipelineId: string, stageId: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    /**
     * Create a new stage associated with the pipeline identified by `{pipelineId}`. The entire stage object, including its unique ID, will be returned in the response.
     * @summary Create a pipeline stage
     * @param objectType
     * @param pipelineId
     * @param pipelineStageInput
     */
    create(objectType: string, pipelineId: string, pipelineStageInput?: PipelineStageInput, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: PipelineStage;
    }>;
    /**
     * Return all the stages associated with the pipeline identified by `{pipelineId}`.
     * @summary Return all stages of a pipeline
     * @param objectType
     * @param pipelineId
     * @param archived Whether to return only results that have been archived.
     */
    getAll(objectType: string, pipelineId: string, archived?: boolean, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: CollectionResponsePipelineStage;
    }>;
    /**
     * Return the stage identified by `{stageId}` associated with the pipeline identified by `{pipelineId}`.
     * @summary Return a pipeline stage by ID
     * @param objectType
     * @param pipelineId
     * @param stageId
     * @param archived Whether to return only results that have been archived.
     */
    getById(objectType: string, pipelineId: string, stageId: string, archived?: boolean, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: PipelineStage;
    }>;
    /**
     * Replace all the properties of an existing pipeline stage with the values provided. The updated stage will be returned in the response.
     * @summary Replace a pipeline stage
     * @param objectType
     * @param pipelineId
     * @param stageId
     * @param pipelineStageInput
     */
    replace(objectType: string, pipelineId: string, stageId: string, pipelineStageInput?: PipelineStageInput, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: PipelineStage;
    }>;
    /**
     * Perform a partial update of the pipeline stage identified by `{stageId}` associated with the pipeline identified by `{pipelineId}`. Any properties not included in this update will keep their existing values. The updated stage will be returned in the response.
     * @summary Update a pipeline stage
     * @param objectType
     * @param pipelineId
     * @param stageId
     * @param archived Whether to return only results that have been archived.
     * @param pipelineStagePatchInput
     */
    update(objectType: string, pipelineId: string, stageId: string, archived?: boolean, pipelineStagePatchInput?: PipelineStagePatchInput, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: PipelineStage;
    }>;
}
