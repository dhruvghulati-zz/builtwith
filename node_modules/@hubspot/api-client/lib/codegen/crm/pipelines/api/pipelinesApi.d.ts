/**
 * CRM Pipelines
 * Pipelines represent distinct stages in a workflow, like closing a deal or servicing a support ticket. These endpoints provide access to read and modify pipelines in HubSpot. Pipelines support `deals` and `tickets` object types.  ## Pipeline ID validation  When calling endpoints that take pipelineId as a parameter, that ID must correspond to an existing, un-archived pipeline. Otherwise the request will fail with a `404 Not Found` response.
 *
 * The version of the OpenAPI document: v3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/// <reference types="node" />
import http = require('http');
import { CollectionResponsePipeline } from '../model/collectionResponsePipeline';
import { Pipeline } from '../model/pipeline';
import { PipelineInput } from '../model/pipelineInput';
import { PipelinePatchInput } from '../model/pipelinePatchInput';
import { Authentication, Interceptor } from '../model/models';
import { ApiKeyAuth, OAuth } from '../model/models';
export declare enum PipelinesApiApiKeys {
    hapikey = 0
}
export declare class PipelinesApi {
    protected _basePath: string;
    protected _defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        hapikey: ApiKeyAuth;
        oauth2: OAuth;
    };
    protected interceptors: Interceptor[];
    constructor(basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    set defaultHeaders(defaultHeaders: any);
    get defaultHeaders(): any;
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: PipelinesApiApiKeys, value: string): void;
    set accessToken(token: string);
    addInterceptor(interceptor: Interceptor): void;
    /**
     * Archive the pipeline identified by `{pipelineId}`.
     * @summary Archive a pipeline
     * @param objectType
     * @param pipelineId
     */
    archive(objectType: string, pipelineId: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    /**
     * Create a new pipeline with the provided property values. The entire pipeline object, including its unique ID, will be returned in the response.
     * @summary Create a pipeline
     * @param objectType
     * @param pipelineInput
     */
    create(objectType: string, pipelineInput?: PipelineInput, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Pipeline;
    }>;
    /**
     * Return all pipelines for the object type specified by `{objectType}`.
     * @summary Retrieve all pipelines
     * @param objectType
     * @param archived Whether to return only results that have been archived.
     */
    getAll(objectType: string, archived?: boolean, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: CollectionResponsePipeline;
    }>;
    /**
     * Return a single pipeline object identified by its unique `{pipelineId}`.
     * @summary Return a pipeline by ID
     * @param objectType
     * @param pipelineId
     * @param archived Whether to return only results that have been archived.
     */
    getById(objectType: string, pipelineId: string, archived?: boolean, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Pipeline;
    }>;
    /**
     * Replace all the properties of an existing pipeline with the values provided. This will overwrite any existing pipeline stages. The updated pipeline will be returned in the response.
     * @summary Replace a pipeline
     * @param objectType
     * @param pipelineId
     * @param pipelineInput
     */
    replace(objectType: string, pipelineId: string, pipelineInput?: PipelineInput, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Pipeline;
    }>;
    /**
     * Perform a partial update of the pipeline identified by `{pipelineId}`. The updated pipeline will be returned in the response.
     * @summary Update a pipeline
     * @param objectType
     * @param pipelineId
     * @param archived Whether to return only results that have been archived.
     * @param pipelinePatchInput
     */
    update(objectType: string, pipelineId: string, archived?: boolean, pipelinePatchInput?: PipelinePatchInput, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Pipeline;
    }>;
}
