export * from './associatedId';
export * from './batchInputSimplePublicObjectBatchInput';
export * from './batchInputSimplePublicObjectId';
export * from './batchInputSimplePublicObjectInput';
export * from './batchReadInputSimplePublicObjectId';
export * from './batchResponseSimplePublicObject';
export * from './batchResponseSimplePublicObjectWithErrors';
export * from './collectionResponseAssociatedId';
export * from './collectionResponseAssociatedIdForwardPaging';
export * from './collectionResponseSimplePublicObjectWithAssociationsForwardPaging';
export * from './collectionResponseWithTotalSimplePublicObjectForwardPaging';
export * from './errorCategory';
export * from './errorDetail';
export * from './filter';
export * from './filterGroup';
export * from './forwardPaging';
export * from './modelError';
export * from './nextPage';
export * from './paging';
export * from './previousPage';
export * from './publicObjectSearchRequest';
export * from './simplePublicObject';
export * from './simplePublicObjectBatchInput';
export * from './simplePublicObjectId';
export * from './simplePublicObjectInput';
export * from './simplePublicObjectWithAssociations';
export * from './standardError';
import localVarRequest = require('request');
export declare class ObjectSerializer {
    static findCorrectType(data: any, expectedType: string): any;
    static serialize(data: any, type: string): any;
    static deserialize(data: any, type: string): any;
}
export interface Authentication {
    /**
    * Apply authentication settings to header and query params.
    */
    applyToRequest(requestOptions: localVarRequest.Options): Promise<void> | void;
}
export declare class HttpBasicAuth implements Authentication {
    username: string;
    password: string;
    applyToRequest(requestOptions: localVarRequest.Options): void;
}
export declare class HttpBearerAuth implements Authentication {
    accessToken: string | (() => string);
    applyToRequest(requestOptions: localVarRequest.Options): void;
}
export declare class ApiKeyAuth implements Authentication {
    private location;
    private paramName;
    apiKey: string;
    constructor(location: string, paramName: string);
    applyToRequest(requestOptions: localVarRequest.Options): void;
}
export declare class OAuth implements Authentication {
    accessToken: string;
    applyToRequest(requestOptions: localVarRequest.Options): void;
}
export declare class VoidAuth implements Authentication {
    username: string;
    password: string;
    applyToRequest(_: localVarRequest.Options): void;
}
export declare type Interceptor = (requestOptions: localVarRequest.Options) => (Promise<void> | void);
