"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VoidAuth = exports.OAuth = exports.ApiKeyAuth = exports.HttpBearerAuth = exports.HttpBasicAuth = exports.ObjectSerializer = void 0;
__exportStar(require("./batchInputPropertyCreate"), exports);
__exportStar(require("./batchInputPropertyName"), exports);
__exportStar(require("./batchReadInputPropertyName"), exports);
__exportStar(require("./batchResponseProperty"), exports);
__exportStar(require("./collectionResponseProperty"), exports);
__exportStar(require("./collectionResponsePropertyGroup"), exports);
__exportStar(require("./errorCategory"), exports);
__exportStar(require("./errorDetail"), exports);
__exportStar(require("./modelError"), exports);
__exportStar(require("./nextPage"), exports);
__exportStar(require("./option"), exports);
__exportStar(require("./optionInput"), exports);
__exportStar(require("./paging"), exports);
__exportStar(require("./property"), exports);
__exportStar(require("./propertyCreate"), exports);
__exportStar(require("./propertyGroup"), exports);
__exportStar(require("./propertyGroupCreate"), exports);
__exportStar(require("./propertyGroupUpdate"), exports);
__exportStar(require("./propertyModificationMetadata"), exports);
__exportStar(require("./propertyName"), exports);
__exportStar(require("./propertyUpdate"), exports);
__exportStar(require("./standardError"), exports);
const batchInputPropertyCreate_1 = require("./batchInputPropertyCreate");
const batchInputPropertyName_1 = require("./batchInputPropertyName");
const batchReadInputPropertyName_1 = require("./batchReadInputPropertyName");
const batchResponseProperty_1 = require("./batchResponseProperty");
const collectionResponseProperty_1 = require("./collectionResponseProperty");
const collectionResponsePropertyGroup_1 = require("./collectionResponsePropertyGroup");
const errorCategory_1 = require("./errorCategory");
const errorDetail_1 = require("./errorDetail");
const modelError_1 = require("./modelError");
const nextPage_1 = require("./nextPage");
const option_1 = require("./option");
const optionInput_1 = require("./optionInput");
const paging_1 = require("./paging");
const property_1 = require("./property");
const propertyCreate_1 = require("./propertyCreate");
const propertyGroup_1 = require("./propertyGroup");
const propertyGroupCreate_1 = require("./propertyGroupCreate");
const propertyGroupUpdate_1 = require("./propertyGroupUpdate");
const propertyModificationMetadata_1 = require("./propertyModificationMetadata");
const propertyName_1 = require("./propertyName");
const propertyUpdate_1 = require("./propertyUpdate");
const standardError_1 = require("./standardError");
/* tslint:disable:no-unused-variable */
let primitives = [
    "string",
    "boolean",
    "double",
    "integer",
    "long",
    "float",
    "number",
    "any"
];
let enumsMap = {
    "BatchResponseProperty.StatusEnum": batchResponseProperty_1.BatchResponseProperty.StatusEnum,
    "ErrorCategory.HttpStatusEnum": errorCategory_1.ErrorCategory.HttpStatusEnum,
    "PropertyCreate.TypeEnum": propertyCreate_1.PropertyCreate.TypeEnum,
    "PropertyCreate.FieldTypeEnum": propertyCreate_1.PropertyCreate.FieldTypeEnum,
    "PropertyUpdate.TypeEnum": propertyUpdate_1.PropertyUpdate.TypeEnum,
    "PropertyUpdate.FieldTypeEnum": propertyUpdate_1.PropertyUpdate.FieldTypeEnum,
};
let typeMap = {
    "BatchInputPropertyCreate": batchInputPropertyCreate_1.BatchInputPropertyCreate,
    "BatchInputPropertyName": batchInputPropertyName_1.BatchInputPropertyName,
    "BatchReadInputPropertyName": batchReadInputPropertyName_1.BatchReadInputPropertyName,
    "BatchResponseProperty": batchResponseProperty_1.BatchResponseProperty,
    "CollectionResponseProperty": collectionResponseProperty_1.CollectionResponseProperty,
    "CollectionResponsePropertyGroup": collectionResponsePropertyGroup_1.CollectionResponsePropertyGroup,
    "ErrorCategory": errorCategory_1.ErrorCategory,
    "ErrorDetail": errorDetail_1.ErrorDetail,
    "ModelError": modelError_1.ModelError,
    "NextPage": nextPage_1.NextPage,
    "Option": option_1.Option,
    "OptionInput": optionInput_1.OptionInput,
    "Paging": paging_1.Paging,
    "Property": property_1.Property,
    "PropertyCreate": propertyCreate_1.PropertyCreate,
    "PropertyGroup": propertyGroup_1.PropertyGroup,
    "PropertyGroupCreate": propertyGroupCreate_1.PropertyGroupCreate,
    "PropertyGroupUpdate": propertyGroupUpdate_1.PropertyGroupUpdate,
    "PropertyModificationMetadata": propertyModificationMetadata_1.PropertyModificationMetadata,
    "PropertyName": propertyName_1.PropertyName,
    "PropertyUpdate": propertyUpdate_1.PropertyUpdate,
    "StandardError": standardError_1.StandardError,
};
class ObjectSerializer {
    static findCorrectType(data, expectedType) {
        if (data == undefined) {
            return expectedType;
        }
        else if (primitives.indexOf(expectedType.toLowerCase()) !== -1) {
            return expectedType;
        }
        else if (expectedType === "Date") {
            return expectedType;
        }
        else {
            if (enumsMap[expectedType]) {
                return expectedType;
            }
            if (!typeMap[expectedType]) {
                return expectedType; // w/e we don't know the type
            }
            // Check the discriminator
            let discriminatorProperty = typeMap[expectedType].discriminator;
            if (discriminatorProperty == null) {
                return expectedType; // the type does not have a discriminator. use it.
            }
            else {
                if (data[discriminatorProperty]) {
                    var discriminatorType = data[discriminatorProperty];
                    if (typeMap[discriminatorType]) {
                        return discriminatorType; // use the type given in the discriminator
                    }
                    else {
                        return expectedType; // discriminator did not map to a type
                    }
                }
                else {
                    return expectedType; // discriminator was not present (or an empty string)
                }
            }
        }
    }
    static serialize(data, type) {
        if (data == undefined) {
            return data;
        }
        else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        }
        else if (type.lastIndexOf("Array<", 0) === 0) { // string.startsWith pre es6
            let subType = type.replace("Array<", ""); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            let transformedData = [];
            for (let index in data) {
                let date = data[index];
                transformedData.push(ObjectSerializer.serialize(date, subType));
            }
            return transformedData;
        }
        else if (type === "Date") {
            return data.toISOString();
        }
        else {
            if (enumsMap[type]) {
                return data;
            }
            if (!typeMap[type]) { // in case we dont know the type
                return data;
            }
            // Get the actual type of this object
            type = this.findCorrectType(data, type);
            // get the map for the correct type.
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            let instance = {};
            for (let index in attributeTypes) {
                let attributeType = attributeTypes[index];
                instance[attributeType.baseName] = ObjectSerializer.serialize(data[attributeType.name], attributeType.type);
            }
            return instance;
        }
    }
    static deserialize(data, type) {
        // polymorphism may change the actual type.
        type = ObjectSerializer.findCorrectType(data, type);
        if (data == undefined) {
            return data;
        }
        else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        }
        else if (type.lastIndexOf("Array<", 0) === 0) { // string.startsWith pre es6
            let subType = type.replace("Array<", ""); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            let transformedData = [];
            for (let index in data) {
                let date = data[index];
                transformedData.push(ObjectSerializer.deserialize(date, subType));
            }
            return transformedData;
        }
        else if (type === "Date") {
            return new Date(data);
        }
        else {
            if (enumsMap[type]) { // is Enum
                return data;
            }
            if (!typeMap[type]) { // dont know the type
                return data;
            }
            let instance = new typeMap[type]();
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            for (let index in attributeTypes) {
                let attributeType = attributeTypes[index];
                instance[attributeType.name] = ObjectSerializer.deserialize(data[attributeType.baseName], attributeType.type);
            }
            return instance;
        }
    }
}
exports.ObjectSerializer = ObjectSerializer;
class HttpBasicAuth {
    constructor() {
        this.username = '';
        this.password = '';
    }
    applyToRequest(requestOptions) {
        requestOptions.auth = {
            username: this.username, password: this.password
        };
    }
}
exports.HttpBasicAuth = HttpBasicAuth;
class HttpBearerAuth {
    constructor() {
        this.accessToken = '';
    }
    applyToRequest(requestOptions) {
        if (requestOptions && requestOptions.headers) {
            const accessToken = typeof this.accessToken === 'function'
                ? this.accessToken()
                : this.accessToken;
            requestOptions.headers["Authorization"] = "Bearer " + accessToken;
        }
    }
}
exports.HttpBearerAuth = HttpBearerAuth;
class ApiKeyAuth {
    constructor(location, paramName) {
        this.location = location;
        this.paramName = paramName;
        this.apiKey = '';
    }
    applyToRequest(requestOptions) {
        if (this.location == "query") {
            requestOptions.qs[this.paramName] = this.apiKey;
        }
        else if (this.location == "header" && requestOptions && requestOptions.headers) {
            requestOptions.headers[this.paramName] = this.apiKey;
        }
        else if (this.location == 'cookie' && requestOptions && requestOptions.headers) {
            if (requestOptions.headers['Cookie']) {
                requestOptions.headers['Cookie'] += '; ' + this.paramName + '=' + encodeURIComponent(this.apiKey);
            }
            else {
                requestOptions.headers['Cookie'] = this.paramName + '=' + encodeURIComponent(this.apiKey);
            }
        }
    }
}
exports.ApiKeyAuth = ApiKeyAuth;
class OAuth {
    constructor() {
        this.accessToken = '';
    }
    applyToRequest(requestOptions) {
        if (requestOptions && requestOptions.headers) {
            requestOptions.headers["Authorization"] = "Bearer " + this.accessToken;
        }
    }
}
exports.OAuth = OAuth;
class VoidAuth {
    constructor() {
        this.username = '';
        this.password = '';
    }
    applyToRequest(_) {
        // Do nothing
    }
}
exports.VoidAuth = VoidAuth;
