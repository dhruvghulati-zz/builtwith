/**
 * Properties
 * All HubSpot objects store data in default and custom properties. These endpoints provide access to read and modify object properties in HubSpot.
 *
 * The version of the OpenAPI document: v3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/// <reference types="node" />
import http = require('http');
import { CollectionResponseProperty } from '../model/collectionResponseProperty';
import { Property } from '../model/property';
import { PropertyCreate } from '../model/propertyCreate';
import { PropertyUpdate } from '../model/propertyUpdate';
import { Authentication, Interceptor } from '../model/models';
import { ApiKeyAuth, OAuth } from '../model/models';
export declare enum CoreApiApiKeys {
    hapikey = 0
}
export declare class CoreApi {
    protected _basePath: string;
    protected _defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        hapikey: ApiKeyAuth;
        oauth2: OAuth;
    };
    protected interceptors: Interceptor[];
    constructor(basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    set defaultHeaders(defaultHeaders: any);
    get defaultHeaders(): any;
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: CoreApiApiKeys, value: string): void;
    set accessToken(token: string);
    addInterceptor(interceptor: Interceptor): void;
    /**
     * Move a property identified by {propertyName} to the recycling bin.
     * @summary Archive a property
     * @param objectType
     * @param propertyName
     */
    archive(objectType: string, propertyName: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    /**
     * Create and return a copy of a new property for the specified object type.
     * @summary Create a property
     * @param objectType
     * @param propertyCreate
     */
    create(objectType: string, propertyCreate: PropertyCreate, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Property;
    }>;
    /**
     * Read all existing properties for the specified object type and HubSpot account.
     * @summary Read all properties
     * @param objectType
     * @param archived Whether to return only results that have been archived.
     */
    getAll(objectType: string, archived?: boolean, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: CollectionResponseProperty;
    }>;
    /**
     * Read a property identified by {propertyName}.
     * @summary Read a property
     * @param objectType
     * @param propertyName
     * @param archived Whether to return only results that have been archived.
     */
    getByName(objectType: string, propertyName: string, archived?: boolean, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Property;
    }>;
    /**
     * Perform a partial update of a property identified by {propertyName}. Provided fields will be overwritten.
     * @summary Update a property
     * @param objectType
     * @param propertyName
     * @param propertyUpdate
     */
    update(objectType: string, propertyName: string, propertyUpdate: PropertyUpdate, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Property;
    }>;
}
