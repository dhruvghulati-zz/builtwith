/**
 * Schemas
 * The CRM uses schemas to define how custom objects should store and represent information in the HubSpot CRM. Schemas define details about an object\'s type, properties, and associations. The schema can be uniquely identified by its **object type ID**.
 *
 * The version of the OpenAPI document: v3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/// <reference types="node" />
import http = require('http');
import { AssociationDefinition } from '../model/associationDefinition';
import { AssociationDefinitionEgg } from '../model/associationDefinitionEgg';
import { CollectionResponseObjectSchemaNoPaging } from '../model/collectionResponseObjectSchemaNoPaging';
import { ObjectSchema } from '../model/objectSchema';
import { ObjectSchemaEgg } from '../model/objectSchemaEgg';
import { ObjectTypeDefinition } from '../model/objectTypeDefinition';
import { ObjectTypeDefinitionPatch } from '../model/objectTypeDefinitionPatch';
import { Authentication, Interceptor } from '../model/models';
import { ApiKeyAuth, OAuth } from '../model/models';
export declare enum CoreApiApiKeys {
    hapikey = 0
}
export declare class CoreApi {
    protected _basePath: string;
    protected _defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        hapikey: ApiKeyAuth;
        oauth2: OAuth;
    };
    protected interceptors: Interceptor[];
    constructor(basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    set defaultHeaders(defaultHeaders: any);
    get defaultHeaders(): any;
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: CoreApiApiKeys, value: string): void;
    set accessToken(token: string);
    addInterceptor(interceptor: Interceptor): void;
    /**
     * Deletes a schema. Any existing records of this schema must be deleted **first**. Otherwise this call will fail.
     * @summary Delete a schema
     * @param objectType Fully qualified name or object type ID of your schema.
     * @param archived Whether to return only results that have been archived.
     */
    archive(objectType: string, archived?: boolean, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    /**
     * Removes an existing association from a schema.
     * @summary Remove an association
     * @param objectType Fully qualified name or object type ID of your schema.
     * @param associationIdentifier Unique ID of the association to remove.
     */
    archiveAssociation(objectType: string, associationIdentifier: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    /**
     * Define a new object schema, along with custom properties and associations. The entire object schema, including its object type ID, properties, and associations will be returned in the response.
     * @summary Create a new schema
     * @param objectSchemaEgg Object schema definition, including properties and associations.
     */
    create(objectSchemaEgg: ObjectSchemaEgg, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: ObjectSchema;
    }>;
    /**
     * Defines a new association between the primary schema\'s object type and other object types.
     * @summary Create an association
     * @param objectType Fully qualified name or object type ID of your schema.
     * @param associationDefinitionEgg Attributes that define the association.
     */
    createAssociation(objectType: string, associationDefinitionEgg: AssociationDefinitionEgg, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: AssociationDefinition;
    }>;
    /**
     * Returns all object schemas that have been defined for your account.
     * @summary Get all schemas
     * @param archived Whether to return only results that have been archived.
     */
    getAll(archived?: boolean, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: CollectionResponseObjectSchemaNoPaging;
    }>;
    /**
     * Returns an existing object schema.
     * @summary Get an existing schema
     * @param objectType Fully qualified name or object type ID of your schema.
     */
    getById(objectType: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: ObjectSchema;
    }>;
    /**
     * Update the details for an existing object schema.
     * @summary Update a schema
     * @param objectType Fully qualified name or object type ID of your schema.
     * @param objectTypeDefinitionPatch Attributes to update in your schema.
     */
    update(objectType: string, objectTypeDefinitionPatch: ObjectTypeDefinitionPatch, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: ObjectTypeDefinition;
    }>;
}
