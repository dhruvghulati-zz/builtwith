/**
 * CRM cards
 * Allows an app to extend the CRM UI by surfacing custom cards in the sidebar of record pages. These cards are defined up-front as part of app configuration, then populated by external data fetch requests when the record page is accessed by a user.
 *
 * The version of the OpenAPI document: v3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/// <reference types="node" />
import http = require('http');
import { CardCreateRequest } from '../model/cardCreateRequest';
import { CardListResponse } from '../model/cardListResponse';
import { CardPatchRequest } from '../model/cardPatchRequest';
import { CardResponse } from '../model/cardResponse';
import { Authentication, Interceptor } from '../model/models';
import { ApiKeyAuth } from '../model/models';
export declare enum CardsApiApiKeys {
    developer_hapikey = 0
}
export declare class CardsApi {
    protected _basePath: string;
    protected _defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        developer_hapikey: ApiKeyAuth;
    };
    protected interceptors: Interceptor[];
    constructor(basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    set defaultHeaders(defaultHeaders: any);
    get defaultHeaders(): any;
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: CardsApiApiKeys, value: string): void;
    addInterceptor(interceptor: Interceptor): void;
    /**
     * Permanently deletes a card definition with the given ID. Once deleted, data fetch requests for this card will no longer be sent to your service. This can\'t be undone.
     * @summary Delete a card
     * @param appId The ID of the target app.
     * @param cardId The ID of the card to delete.
     */
    archive(appId: number, cardId: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    /**
     * Defines a new card that will become active on an account when this app is installed.
     * @summary Create a new card
     * @param appId The ID of the target app.
     * @param cardCreateRequest The new card definition.
     */
    create(appId: number, cardCreateRequest: CardCreateRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: CardResponse;
    }>;
    /**
     * Returns a list of cards for a given app.
     * @summary Get all cards
     * @param appId The ID of the target app.
     */
    getAll(appId: number, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: CardListResponse;
    }>;
    /**
     * Returns the definition for a card with the given ID.
     * @summary Get a card.
     * @param appId The ID of the target app.
     * @param cardId The ID of the target card.
     */
    getById(appId: number, cardId: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: CardResponse;
    }>;
    /**
     * Update a card definition with new details.
     * @summary Update a card
     * @param appId The ID of the target app.
     * @param cardId The ID of the card to update.
     * @param cardPatchRequest Card definition fields to be updated.
     */
    update(appId: number, cardId: string, cardPatchRequest: CardPatchRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: CardResponse;
    }>;
}
