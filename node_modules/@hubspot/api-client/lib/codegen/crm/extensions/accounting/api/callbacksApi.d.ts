/**
 * Accounting Extension
 * These APIs allow you to interact with HubSpot\'s Accounting Extension. It allows you to: * Specify the URLs that HubSpot will use when making webhook requests to your external accounting system. * Respond to webhook calls made to your external accounting system by HubSpot
 *
 * The version of the OpenAPI document: v3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/// <reference types="node" />
import http = require('http');
import { CustomerSearchResponseExternal } from '../model/customerSearchResponseExternal';
import { ExchangeRateResponse } from '../model/exchangeRateResponse';
import { InvoicePdfResponse } from '../model/invoicePdfResponse';
import { InvoiceSearchResponse } from '../model/invoiceSearchResponse';
import { InvoicesResponseExternal } from '../model/invoicesResponseExternal';
import { ProductSearchResponse } from '../model/productSearchResponse';
import { ResultIdAccountingResponse } from '../model/resultIdAccountingResponse';
import { TaxSearchResponse } from '../model/taxSearchResponse';
import { TermsResponse } from '../model/termsResponse';
import { Authentication, Interceptor } from '../model/models';
import { ApiKeyAuth, OAuth } from '../model/models';
export declare enum CallbacksApiApiKeys {
    hapikey = 0
}
export declare class CallbacksApi {
    protected _basePath: string;
    protected _defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        hapikey: ApiKeyAuth;
        oauth2: OAuth;
    };
    protected interceptors: Interceptor[];
    constructor(basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    set defaultHeaders(defaultHeaders: any);
    get defaultHeaders(): any;
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: CallbacksApiApiKeys, value: string): void;
    set accessToken(token: string);
    addInterceptor(interceptor: Interceptor): void;
    /**
     * Call this endpoint with the response to a customer creation request.
     * @summary Endpoint for customer creation response
     * @param requestId The ID of the request that this response is for
     * @param resultIdAccountingResponse The ID of the created customer.
     */
    createCustomer(requestId: string, resultIdAccountingResponse: ResultIdAccountingResponse, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    /**
     * Call this endpoint with the response to an exchange rate request.
     * @summary Endpoint for exchange rate response
     * @param requestId The ID of the request that this response is for
     * @param exchangeRateResponse The result of the exchange rate request.
     */
    createExchangeRate(requestId: string, exchangeRateResponse: ExchangeRateResponse, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    /**
     * Call this endpoint with the response to a invoice creation request.
     * @summary Endpoint for invoice creation response
     * @param requestId The ID of the request that this response is for
     * @param resultIdAccountingResponse The ID of the created invoice.
     */
    createInvoice(requestId: string, resultIdAccountingResponse: ResultIdAccountingResponse, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    /**
     * Call this endpoint with the response to a terms search request.
     * @summary Endpoint for terms search response
     * @param requestId The ID of the request that this response is for
     * @param termsResponse The result of the terms search
     */
    createTerm(requestId: string, termsResponse: TermsResponse, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    /**
     * Call this endpoint with the response to a customer search request.
     * @summary Endpoint for customer search response
     * @param requestId The ID of the request that this response is for
     * @param customerSearchResponseExternal The result of the customer search request.
     */
    doCustomerSearch(requestId: string, customerSearchResponseExternal: CustomerSearchResponseExternal, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    /**
     * Call this endpoint with the response to a invoice search request.
     * @summary Endpoint for invoice search response
     * @param requestId The ID of the request that this response is for
     * @param invoiceSearchResponse The result of the invoice search request.
     */
    doInvoiceSearch(requestId: string, invoiceSearchResponse: InvoiceSearchResponse, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    /**
     * Call this endpoint with the response to a product search request.
     * @summary Endpoint for product search response
     * @param requestId The ID of the request that this response is for
     * @param productSearchResponse The result of the product search request.
     */
    doProductSearch(requestId: string, productSearchResponse: ProductSearchResponse, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    /**
     * Call this endpoint with the response to a taxes search request.
     * @summary Endpoint for taxes search response
     * @param requestId The ID of the request that this response is for
     * @param taxSearchResponse The result of the taxes search request.
     */
    doTaxSearch(requestId: string, taxSearchResponse: TaxSearchResponse, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    /**
     * Call this endpoint with the response to a invoice get-by-id request.
     * @summary Endpoint for invoice get-by-id response
     * @param requestId The ID of the request that this response is for
     * @param invoicesResponseExternal The result of the invoice request.
     */
    getById(requestId: string, invoicesResponseExternal: InvoicesResponseExternal, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    /**
     * Call this endpoint with the PDF content of a requested invoice.
     * @summary Endpoint for PDF content of invoice
     * @param requestId The ID of the request that this response is for
     * @param invoicePdfResponse The bytes of the invoice PDF.
     */
    invoicePdf(requestId: string, invoicePdfResponse: InvoicePdfResponse, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
}
