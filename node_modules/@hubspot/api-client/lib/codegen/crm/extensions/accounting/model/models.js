"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VoidAuth = exports.OAuth = exports.ApiKeyAuth = exports.HttpBearerAuth = exports.HttpBasicAuth = exports.ObjectSerializer = void 0;
__exportStar(require("./accountingAppSettings"), exports);
__exportStar(require("./accountingAppUrls"), exports);
__exportStar(require("./accountingExtensionCustomer"), exports);
__exportStar(require("./accountingExtensionInvoice"), exports);
__exportStar(require("./accountingExtensionTerm"), exports);
__exportStar(require("./accountingFeatures"), exports);
__exportStar(require("./actionResponse"), exports);
__exportStar(require("./address"), exports);
__exportStar(require("./createInvoiceFeature"), exports);
__exportStar(require("./createInvoiceSubFeatures"), exports);
__exportStar(require("./createUserAccountRequestExternal"), exports);
__exportStar(require("./customerSearchResponseExternal"), exports);
__exportStar(require("./errorDetail"), exports);
__exportStar(require("./exchangeRateResponse"), exports);
__exportStar(require("./importInvoiceFeature"), exports);
__exportStar(require("./invoiceCreatePaymentRequest"), exports);
__exportStar(require("./invoicePdfResponse"), exports);
__exportStar(require("./invoiceReadResponse"), exports);
__exportStar(require("./invoiceSearchResponse"), exports);
__exportStar(require("./invoiceUpdateRequest"), exports);
__exportStar(require("./invoiceUpdateResponse"), exports);
__exportStar(require("./invoicesResponseExternal"), exports);
__exportStar(require("./modelError"), exports);
__exportStar(require("./objectSyncFeature"), exports);
__exportStar(require("./product"), exports);
__exportStar(require("./productSearchResponse"), exports);
__exportStar(require("./resultIdAccountingResponse"), exports);
__exportStar(require("./syncContactsRequest"), exports);
__exportStar(require("./syncProductsRequest"), exports);
__exportStar(require("./tax"), exports);
__exportStar(require("./taxSearchResponse"), exports);
__exportStar(require("./taxType"), exports);
__exportStar(require("./termsResponse"), exports);
__exportStar(require("./unitPrice"), exports);
__exportStar(require("./updatedContact"), exports);
__exportStar(require("./updatedProduct"), exports);
const accountingAppSettings_1 = require("./accountingAppSettings");
const accountingAppUrls_1 = require("./accountingAppUrls");
const accountingExtensionCustomer_1 = require("./accountingExtensionCustomer");
const accountingExtensionInvoice_1 = require("./accountingExtensionInvoice");
const accountingExtensionTerm_1 = require("./accountingExtensionTerm");
const accountingFeatures_1 = require("./accountingFeatures");
const actionResponse_1 = require("./actionResponse");
const address_1 = require("./address");
const createInvoiceFeature_1 = require("./createInvoiceFeature");
const createInvoiceSubFeatures_1 = require("./createInvoiceSubFeatures");
const createUserAccountRequestExternal_1 = require("./createUserAccountRequestExternal");
const customerSearchResponseExternal_1 = require("./customerSearchResponseExternal");
const errorDetail_1 = require("./errorDetail");
const exchangeRateResponse_1 = require("./exchangeRateResponse");
const importInvoiceFeature_1 = require("./importInvoiceFeature");
const invoiceCreatePaymentRequest_1 = require("./invoiceCreatePaymentRequest");
const invoicePdfResponse_1 = require("./invoicePdfResponse");
const invoiceReadResponse_1 = require("./invoiceReadResponse");
const invoiceSearchResponse_1 = require("./invoiceSearchResponse");
const invoiceUpdateRequest_1 = require("./invoiceUpdateRequest");
const invoiceUpdateResponse_1 = require("./invoiceUpdateResponse");
const invoicesResponseExternal_1 = require("./invoicesResponseExternal");
const modelError_1 = require("./modelError");
const objectSyncFeature_1 = require("./objectSyncFeature");
const product_1 = require("./product");
const productSearchResponse_1 = require("./productSearchResponse");
const resultIdAccountingResponse_1 = require("./resultIdAccountingResponse");
const syncContactsRequest_1 = require("./syncContactsRequest");
const syncProductsRequest_1 = require("./syncProductsRequest");
const tax_1 = require("./tax");
const taxSearchResponse_1 = require("./taxSearchResponse");
const taxType_1 = require("./taxType");
const termsResponse_1 = require("./termsResponse");
const unitPrice_1 = require("./unitPrice");
const updatedContact_1 = require("./updatedContact");
const updatedProduct_1 = require("./updatedProduct");
/* tslint:disable:no-unused-variable */
let primitives = [
    "string",
    "boolean",
    "double",
    "integer",
    "long",
    "float",
    "number",
    "any"
];
let enumsMap = {
    "AccountingExtensionInvoice.StatusEnum": accountingExtensionInvoice_1.AccountingExtensionInvoice.StatusEnum,
    "ActionResponse.StatusEnum": actionResponse_1.ActionResponse.StatusEnum,
    "CustomerSearchResponseExternal.ResultEnum": customerSearchResponseExternal_1.CustomerSearchResponseExternal.ResultEnum,
    "ExchangeRateResponse.ResultEnum": exchangeRateResponse_1.ExchangeRateResponse.ResultEnum,
    "InvoicePdfResponse.ResultEnum": invoicePdfResponse_1.InvoicePdfResponse.ResultEnum,
    "InvoiceReadResponse.InvoiceStatusEnum": invoiceReadResponse_1.InvoiceReadResponse.InvoiceStatusEnum,
    "InvoiceSearchResponse.ResultEnum": invoiceSearchResponse_1.InvoiceSearchResponse.ResultEnum,
    "InvoiceUpdateResponse.InvoiceStatusEnum": invoiceUpdateResponse_1.InvoiceUpdateResponse.InvoiceStatusEnum,
    "InvoicesResponseExternal.ResultEnum": invoicesResponseExternal_1.InvoicesResponseExternal.ResultEnum,
    "ProductSearchResponse.ResultEnum": productSearchResponse_1.ProductSearchResponse.ResultEnum,
    "ResultIdAccountingResponse.ResultEnum": resultIdAccountingResponse_1.ResultIdAccountingResponse.ResultEnum,
    "TaxSearchResponse.ResultEnum": taxSearchResponse_1.TaxSearchResponse.ResultEnum,
    "TermsResponse.ResultEnum": termsResponse_1.TermsResponse.ResultEnum,
    "UpdatedContact.SyncActionEnum": updatedContact_1.UpdatedContact.SyncActionEnum,
    "UpdatedContact.CustomerTypeEnum": updatedContact_1.UpdatedContact.CustomerTypeEnum,
    "UpdatedProduct.SyncActionEnum": updatedProduct_1.UpdatedProduct.SyncActionEnum,
};
let typeMap = {
    "AccountingAppSettings": accountingAppSettings_1.AccountingAppSettings,
    "AccountingAppUrls": accountingAppUrls_1.AccountingAppUrls,
    "AccountingExtensionCustomer": accountingExtensionCustomer_1.AccountingExtensionCustomer,
    "AccountingExtensionInvoice": accountingExtensionInvoice_1.AccountingExtensionInvoice,
    "AccountingExtensionTerm": accountingExtensionTerm_1.AccountingExtensionTerm,
    "AccountingFeatures": accountingFeatures_1.AccountingFeatures,
    "ActionResponse": actionResponse_1.ActionResponse,
    "Address": address_1.Address,
    "CreateInvoiceFeature": createInvoiceFeature_1.CreateInvoiceFeature,
    "CreateInvoiceSubFeatures": createInvoiceSubFeatures_1.CreateInvoiceSubFeatures,
    "CreateUserAccountRequestExternal": createUserAccountRequestExternal_1.CreateUserAccountRequestExternal,
    "CustomerSearchResponseExternal": customerSearchResponseExternal_1.CustomerSearchResponseExternal,
    "ErrorDetail": errorDetail_1.ErrorDetail,
    "ExchangeRateResponse": exchangeRateResponse_1.ExchangeRateResponse,
    "ImportInvoiceFeature": importInvoiceFeature_1.ImportInvoiceFeature,
    "InvoiceCreatePaymentRequest": invoiceCreatePaymentRequest_1.InvoiceCreatePaymentRequest,
    "InvoicePdfResponse": invoicePdfResponse_1.InvoicePdfResponse,
    "InvoiceReadResponse": invoiceReadResponse_1.InvoiceReadResponse,
    "InvoiceSearchResponse": invoiceSearchResponse_1.InvoiceSearchResponse,
    "InvoiceUpdateRequest": invoiceUpdateRequest_1.InvoiceUpdateRequest,
    "InvoiceUpdateResponse": invoiceUpdateResponse_1.InvoiceUpdateResponse,
    "InvoicesResponseExternal": invoicesResponseExternal_1.InvoicesResponseExternal,
    "ModelError": modelError_1.ModelError,
    "ObjectSyncFeature": objectSyncFeature_1.ObjectSyncFeature,
    "Product": product_1.Product,
    "ProductSearchResponse": productSearchResponse_1.ProductSearchResponse,
    "ResultIdAccountingResponse": resultIdAccountingResponse_1.ResultIdAccountingResponse,
    "SyncContactsRequest": syncContactsRequest_1.SyncContactsRequest,
    "SyncProductsRequest": syncProductsRequest_1.SyncProductsRequest,
    "Tax": tax_1.Tax,
    "TaxSearchResponse": taxSearchResponse_1.TaxSearchResponse,
    "TaxType": taxType_1.TaxType,
    "TermsResponse": termsResponse_1.TermsResponse,
    "UnitPrice": unitPrice_1.UnitPrice,
    "UpdatedContact": updatedContact_1.UpdatedContact,
    "UpdatedProduct": updatedProduct_1.UpdatedProduct,
};
class ObjectSerializer {
    static findCorrectType(data, expectedType) {
        if (data == undefined) {
            return expectedType;
        }
        else if (primitives.indexOf(expectedType.toLowerCase()) !== -1) {
            return expectedType;
        }
        else if (expectedType === "Date") {
            return expectedType;
        }
        else {
            if (enumsMap[expectedType]) {
                return expectedType;
            }
            if (!typeMap[expectedType]) {
                return expectedType; // w/e we don't know the type
            }
            // Check the discriminator
            let discriminatorProperty = typeMap[expectedType].discriminator;
            if (discriminatorProperty == null) {
                return expectedType; // the type does not have a discriminator. use it.
            }
            else {
                if (data[discriminatorProperty]) {
                    var discriminatorType = data[discriminatorProperty];
                    if (typeMap[discriminatorType]) {
                        return discriminatorType; // use the type given in the discriminator
                    }
                    else {
                        return expectedType; // discriminator did not map to a type
                    }
                }
                else {
                    return expectedType; // discriminator was not present (or an empty string)
                }
            }
        }
    }
    static serialize(data, type) {
        if (data == undefined) {
            return data;
        }
        else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        }
        else if (type.lastIndexOf("Array<", 0) === 0) { // string.startsWith pre es6
            let subType = type.replace("Array<", ""); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            let transformedData = [];
            for (let index in data) {
                let date = data[index];
                transformedData.push(ObjectSerializer.serialize(date, subType));
            }
            return transformedData;
        }
        else if (type === "Date") {
            return data.toISOString();
        }
        else {
            if (enumsMap[type]) {
                return data;
            }
            if (!typeMap[type]) { // in case we dont know the type
                return data;
            }
            // Get the actual type of this object
            type = this.findCorrectType(data, type);
            // get the map for the correct type.
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            let instance = {};
            for (let index in attributeTypes) {
                let attributeType = attributeTypes[index];
                instance[attributeType.baseName] = ObjectSerializer.serialize(data[attributeType.name], attributeType.type);
            }
            return instance;
        }
    }
    static deserialize(data, type) {
        // polymorphism may change the actual type.
        type = ObjectSerializer.findCorrectType(data, type);
        if (data == undefined) {
            return data;
        }
        else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        }
        else if (type.lastIndexOf("Array<", 0) === 0) { // string.startsWith pre es6
            let subType = type.replace("Array<", ""); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            let transformedData = [];
            for (let index in data) {
                let date = data[index];
                transformedData.push(ObjectSerializer.deserialize(date, subType));
            }
            return transformedData;
        }
        else if (type === "Date") {
            return new Date(data);
        }
        else {
            if (enumsMap[type]) { // is Enum
                return data;
            }
            if (!typeMap[type]) { // dont know the type
                return data;
            }
            let instance = new typeMap[type]();
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            for (let index in attributeTypes) {
                let attributeType = attributeTypes[index];
                instance[attributeType.name] = ObjectSerializer.deserialize(data[attributeType.baseName], attributeType.type);
            }
            return instance;
        }
    }
}
exports.ObjectSerializer = ObjectSerializer;
class HttpBasicAuth {
    constructor() {
        this.username = '';
        this.password = '';
    }
    applyToRequest(requestOptions) {
        requestOptions.auth = {
            username: this.username, password: this.password
        };
    }
}
exports.HttpBasicAuth = HttpBasicAuth;
class HttpBearerAuth {
    constructor() {
        this.accessToken = '';
    }
    applyToRequest(requestOptions) {
        if (requestOptions && requestOptions.headers) {
            const accessToken = typeof this.accessToken === 'function'
                ? this.accessToken()
                : this.accessToken;
            requestOptions.headers["Authorization"] = "Bearer " + accessToken;
        }
    }
}
exports.HttpBearerAuth = HttpBearerAuth;
class ApiKeyAuth {
    constructor(location, paramName) {
        this.location = location;
        this.paramName = paramName;
        this.apiKey = '';
    }
    applyToRequest(requestOptions) {
        if (this.location == "query") {
            requestOptions.qs[this.paramName] = this.apiKey;
        }
        else if (this.location == "header" && requestOptions && requestOptions.headers) {
            requestOptions.headers[this.paramName] = this.apiKey;
        }
        else if (this.location == 'cookie' && requestOptions && requestOptions.headers) {
            if (requestOptions.headers['Cookie']) {
                requestOptions.headers['Cookie'] += '; ' + this.paramName + '=' + encodeURIComponent(this.apiKey);
            }
            else {
                requestOptions.headers['Cookie'] = this.paramName + '=' + encodeURIComponent(this.apiKey);
            }
        }
    }
}
exports.ApiKeyAuth = ApiKeyAuth;
class OAuth {
    constructor() {
        this.accessToken = '';
    }
    applyToRequest(requestOptions) {
        if (requestOptions && requestOptions.headers) {
            requestOptions.headers["Authorization"] = "Bearer " + this.accessToken;
        }
    }
}
exports.OAuth = OAuth;
class VoidAuth {
    constructor() {
        this.username = '';
        this.password = '';
    }
    applyToRequest(_) {
        // Do nothing
    }
}
exports.VoidAuth = VoidAuth;
