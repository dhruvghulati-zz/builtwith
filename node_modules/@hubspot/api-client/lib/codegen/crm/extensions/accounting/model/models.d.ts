export * from './accountingAppSettings';
export * from './accountingAppUrls';
export * from './accountingExtensionCustomer';
export * from './accountingExtensionInvoice';
export * from './accountingExtensionTerm';
export * from './accountingFeatures';
export * from './actionResponse';
export * from './address';
export * from './createInvoiceFeature';
export * from './createInvoiceSubFeatures';
export * from './createUserAccountRequestExternal';
export * from './customerSearchResponseExternal';
export * from './errorDetail';
export * from './exchangeRateResponse';
export * from './importInvoiceFeature';
export * from './invoiceCreatePaymentRequest';
export * from './invoicePdfResponse';
export * from './invoiceReadResponse';
export * from './invoiceSearchResponse';
export * from './invoiceUpdateRequest';
export * from './invoiceUpdateResponse';
export * from './invoicesResponseExternal';
export * from './modelError';
export * from './objectSyncFeature';
export * from './product';
export * from './productSearchResponse';
export * from './resultIdAccountingResponse';
export * from './syncContactsRequest';
export * from './syncProductsRequest';
export * from './tax';
export * from './taxSearchResponse';
export * from './taxType';
export * from './termsResponse';
export * from './unitPrice';
export * from './updatedContact';
export * from './updatedProduct';
import localVarRequest = require('request');
export declare class ObjectSerializer {
    static findCorrectType(data: any, expectedType: string): any;
    static serialize(data: any, type: string): any;
    static deserialize(data: any, type: string): any;
}
export interface Authentication {
    /**
    * Apply authentication settings to header and query params.
    */
    applyToRequest(requestOptions: localVarRequest.Options): Promise<void> | void;
}
export declare class HttpBasicAuth implements Authentication {
    username: string;
    password: string;
    applyToRequest(requestOptions: localVarRequest.Options): void;
}
export declare class HttpBearerAuth implements Authentication {
    accessToken: string | (() => string);
    applyToRequest(requestOptions: localVarRequest.Options): void;
}
export declare class ApiKeyAuth implements Authentication {
    private location;
    private paramName;
    apiKey: string;
    constructor(location: string, paramName: string);
    applyToRequest(requestOptions: localVarRequest.Options): void;
}
export declare class OAuth implements Authentication {
    accessToken: string;
    applyToRequest(requestOptions: localVarRequest.Options): void;
}
export declare class VoidAuth implements Authentication {
    username: string;
    password: string;
    applyToRequest(_: localVarRequest.Options): void;
}
export declare type Interceptor = (requestOptions: localVarRequest.Options) => (Promise<void> | void);
