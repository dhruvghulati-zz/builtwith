"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = exports.HttpError = exports.videoconferencingModels = exports.siteSearchModels = exports.visitorIdentificationModels = exports.urlRedirectsModels = exports.schemasModels = exports.performanceModels = exports.hubdbModels = exports.domainsModels = exports.tagsModels = exports.blogPostsModels = exports.authorsModels = exports.auditLogsModels = exports.webhooksModels = exports.oauthModels = exports.transactionalModels = exports.timelineModels = exports.ticketsModels = exports.quotesModels = exports.propertiesModels = exports.productsModels = exports.pipelinesModels = exports.objectsModels = exports.ownersModels = exports.lineItemsModels = exports.importsModels = exports.eventsModels = exports.feedbackSubmissionsModels = exports.cardsModels = exports.callingModels = exports.dealsModels = exports.contactsModels = exports.companiesModels = exports.communicationPreferencesModels = exports.associationsModels = exports.actionsModels = exports.accountingModels = exports.NumberOfRetries = void 0;
const bottleneck_1 = __importDefault(require("bottleneck"));
const crypto = require("crypto");
const _ = __importStar(require("lodash"));
const qs = __importStar(require("querystring"));
const request = require("request");
const api_1 = require("../codegen/automation/actions/api");
const actionsModels = __importStar(require("../codegen/automation/actions/model/models"));
exports.actionsModels = actionsModels;
const api_2 = require("../codegen/cms/audit_logs/api");
const auditLogsModels = __importStar(require("../codegen/cms/audit_logs/model/models"));
exports.auditLogsModels = auditLogsModels;
const api_3 = require("../codegen/cms/blogs/authors/api");
const authorsModels = __importStar(require("../codegen/cms/blogs/authors/model/models"));
exports.authorsModels = authorsModels;
const api_4 = require("../codegen/cms/blogs/blog_posts/api");
const blogPostsModels = __importStar(require("../codegen/cms/blogs/blog_posts/model/models"));
exports.blogPostsModels = blogPostsModels;
const api_5 = require("../codegen/cms/blogs/tags/api");
const tagsModels = __importStar(require("../codegen/cms/blogs/tags/model/models"));
exports.tagsModels = tagsModels;
const api_6 = require("../codegen/cms/domains/api");
const domainsModels = __importStar(require("../codegen/cms/domains/model/models"));
exports.domainsModels = domainsModels;
const api_7 = require("../codegen/cms/hubdb/api");
const hubdbModels = __importStar(require("../codegen/cms/hubdb/model/models"));
exports.hubdbModels = hubdbModels;
const api_8 = require("../codegen/cms/performance/api");
const performanceModels = __importStar(require("../codegen/cms/performance/model/models"));
exports.performanceModels = performanceModels;
const api_9 = require("../codegen/cms/site_search/api");
const siteSearchModels = __importStar(require("../codegen/cms/site_search/model/models"));
exports.siteSearchModels = siteSearchModels;
const api_10 = require("../codegen/cms/url_redirects/api");
const urlRedirectsModels = __importStar(require("../codegen/cms/url_redirects/model/models"));
exports.urlRedirectsModels = urlRedirectsModels;
const api_11 = require("../codegen/communication_preferences/api");
const communicationPreferencesModels = __importStar(require("../codegen/communication_preferences/model/models"));
exports.communicationPreferencesModels = communicationPreferencesModels;
const api_12 = require("../codegen/conversations/visitor_identification/api");
const visitorIdentificationModels = __importStar(require("../codegen/conversations/visitor_identification/model/models"));
exports.visitorIdentificationModels = visitorIdentificationModels;
const api_13 = require("../codegen/crm/associations/api");
const associationsModels = __importStar(require("../codegen/crm/associations/model/models"));
exports.associationsModels = associationsModels;
const api_14 = require("../codegen/crm/companies/api");
const companiesModels = __importStar(require("../codegen/crm/companies/model/models"));
exports.companiesModels = companiesModels;
const api_15 = require("../codegen/crm/contacts/api");
const contactsModels = __importStar(require("../codegen/crm/contacts/model/models"));
exports.contactsModels = contactsModels;
const api_16 = require("../codegen/crm/deals/api");
const dealsModels = __importStar(require("../codegen/crm/deals/model/models"));
exports.dealsModels = dealsModels;
const api_17 = require("../codegen/crm/extensions/accounting/api");
const accountingModels = __importStar(require("../codegen/crm/extensions/accounting/model/models"));
exports.accountingModels = accountingModels;
const api_18 = require("../codegen/crm/extensions/calling/api");
const callingModels = __importStar(require("../codegen/crm/extensions/calling/model/models"));
exports.callingModels = callingModels;
const api_19 = require("../codegen/crm/extensions/cards/api");
const cardsModels = __importStar(require("../codegen/crm/extensions/cards/model/models"));
exports.cardsModels = cardsModels;
const api_20 = require("../codegen/crm/extensions/videoconferencing/api");
const videoconferencingModels = __importStar(require("../codegen/crm/extensions/videoconferencing/model/models"));
exports.videoconferencingModels = videoconferencingModels;
const coreApi_1 = require("../codegen/crm/imports/api/coreApi");
const importsModels = __importStar(require("../codegen/crm/imports/model/models"));
exports.importsModels = importsModels;
const api_21 = require("../codegen/crm/line_items/api");
const lineItemsModels = __importStar(require("../codegen/crm/line_items/model/models"));
exports.lineItemsModels = lineItemsModels;
const api_22 = require("../codegen/crm/objects/api");
const api_23 = require("../codegen/crm/objects/feedback_submissions/api");
const feedbackSubmissionsModels = __importStar(require("../codegen/crm/objects/feedback_submissions/model/models"));
exports.feedbackSubmissionsModels = feedbackSubmissionsModels;
const objectsModels = __importStar(require("../codegen/crm/objects/model/models"));
exports.objectsModels = objectsModels;
const api_24 = require("../codegen/crm/owners/api");
const ownersModels = __importStar(require("../codegen/crm/owners/model/models"));
exports.ownersModels = ownersModels;
const api_25 = require("../codegen/crm/pipelines/api");
const pipelinesModels = __importStar(require("../codegen/crm/pipelines/model/models"));
exports.pipelinesModels = pipelinesModels;
const api_26 = require("../codegen/crm/products/api");
const productsModels = __importStar(require("../codegen/crm/products/model/models"));
exports.productsModels = productsModels;
const api_27 = require("../codegen/crm/properties/api");
const propertiesModels = __importStar(require("../codegen/crm/properties/model/models"));
exports.propertiesModels = propertiesModels;
const api_28 = require("../codegen/crm/quotes/api");
const quotesModels = __importStar(require("../codegen/crm/quotes/model/models"));
exports.quotesModels = quotesModels;
const api_29 = require("../codegen/crm/schemas/api");
const schemasModels = __importStar(require("../codegen/crm/schemas/model/models"));
exports.schemasModels = schemasModels;
const api_30 = require("../codegen/crm/tickets/api");
const ticketsModels = __importStar(require("../codegen/crm/tickets/model/models"));
exports.ticketsModels = ticketsModels;
const api_31 = require("../codegen/crm/timeline/api");
const timelineModels = __importStar(require("../codegen/crm/timeline/model/models"));
exports.timelineModels = timelineModels;
const api_32 = require("../codegen/events/api");
const eventsModels = __importStar(require("../codegen/events/model/models"));
exports.eventsModels = eventsModels;
const api_33 = require("../codegen/marketing/transactional/api");
const transactionalModels = __importStar(require("../codegen/marketing/transactional/model/models"));
exports.transactionalModels = transactionalModels;
const api_34 = require("../codegen/oauth/api");
const oauthModels = __importStar(require("../codegen/oauth/model/models"));
exports.oauthModels = oauthModels;
const api_35 = require("../codegen/webhooks/api");
const webhooksModels = __importStar(require("../codegen/webhooks/model/models"));
exports.webhooksModels = webhooksModels;
const version_1 = require("./version");
const DEFAULT_HEADERS = { 'User-Agent': `hubspot-api-client-nodejs; ${version_1.VERSION}` };
const DEFAULT_LIMITER_OPTIONS = {
    minTime: 1000 / 9,
    maxConcurrent: 6,
    id: 'hubspot-client-limiter',
};
const SEARCH_LIMITER_MIN_TIME = 550;
const SEARCH_METHOD_NAME = 'doSearch';
const METHOD_NAMES_TO_EXCLUDE_FROM_PATCHING = [
    'constructor',
    'useQuerystring',
    'basePath',
    'defaultHeaders',
    'setDefaultAuthentication',
    'setApiKey',
    'accessToken',
    'addInterceptor',
];
const RETRY_TIMEOUT = {
    INTERNAL_SERVER_ERROR: 200,
    TOO_MANY_REQUESTS: 10 * 1000,
    TOO_MANY_SEARCH_REQUESTS: 1000,
};
const TEN_SECONDLY_ROLLING = 'TEN_SECONDLY_ROLLING';
const SECONDLY_LIMIT_MESSAGE = 'You have reached your secondly limit.';
var NumberOfRetries;
(function (NumberOfRetries) {
    NumberOfRetries[NumberOfRetries["NoRetries"] = 0] = "NoRetries";
    NumberOfRetries[NumberOfRetries["One"] = 1] = "One";
    NumberOfRetries[NumberOfRetries["Two"] = 2] = "Two";
    NumberOfRetries[NumberOfRetries["Three"] = 3] = "Three";
    NumberOfRetries[NumberOfRetries["Four"] = 4] = "Four";
    NumberOfRetries[NumberOfRetries["Five"] = 5] = "Five";
    NumberOfRetries[NumberOfRetries["Six"] = 6] = "Six";
})(NumberOfRetries = exports.NumberOfRetries || (exports.NumberOfRetries = {}));
class HttpError extends Error {
    constructor(response, body, statusCode) {
        super('HTTP request failed');
        this.response = response;
        this.body = body;
        this.statusCode = statusCode;
        this.name = 'HttpError';
    }
}
exports.HttpError = HttpError;
class Client {
    constructor(options = {}) {
        this._interceptors = [];
        this._basePath = 'https://api.hubapi.com';
        this.authentications = {
            hapikey: new api_24.ApiKeyAuth('query', 'hapikey'),
            oauth2: new api_24.OAuth(),
        };
        this._useLimiter = true;
        this._useSearchLimiter = false;
        this._actionsCallbacksApi = new api_1.CallbacksApi();
        this._actionsDefinitionsApi = new api_1.DefinitionsApi();
        this._actionsFunctionsApi = new api_1.FunctionsApi();
        this._actionsRevisionsApi = new api_1.RevisionsApi();
        this._oauthDefaultApi = new api_34.DefaultApi();
        this._associationsBatchApi = new api_13.BatchApi();
        this._typesApi = new api_13.TypesApi();
        this._communicationPreferencesDefinitionApi = new api_11.DefinitionApi();
        this._communicationPreferencesStatusApi = new api_11.StatusApi();
        this._companiesAssociationsApi = new api_14.AssociationsApi();
        this._companiesBasicApi = new api_14.BasicApi();
        this._companiesBatchApi = new api_14.BatchApi();
        this._companiesSearchApi = new api_14.SearchApi();
        this._contactsAssociationsApi = new api_15.AssociationsApi();
        this._contactsBasicApi = new api_15.BasicApi();
        this._contactsBatchApi = new api_15.BatchApi();
        this._contactsSearchApi = new api_15.SearchApi();
        this._dealsAssociationsApi = new api_16.AssociationsApi();
        this._dealsBasicApi = new api_16.BasicApi();
        this._dealsBatchApi = new api_16.BatchApi();
        this._dealsSearchApi = new api_16.SearchApi();
        this._accountingCallbacksApi = new api_17.CallbacksApi();
        this._accountingInvoiceApi = new api_17.InvoiceApi();
        this._accountingSettingsApi = new api_17.SettingsApi();
        this._accountingSyncApi = new api_17.SyncApi();
        this._accountingUserAccountsApi = new api_17.UserAccountsApi();
        this._callingSettingsApi = new api_18.SettingsApi();
        this._cardsApi = new api_19.CardsApi();
        this._cardsSampleResponseApi = new api_19.SampleResponseApi();
        this._feedbackSubmissionsAssociationsApi = new api_23.AssociationsApi();
        this._feedbackSubmissionsBasicApi = new api_23.BasicApi();
        this._feedbackSubmissionsBatchApi = new api_23.BatchApi();
        this._feedbackSubmissionsSearchApi = new api_23.SearchApi();
        this._videoconferencingSettingsApi = new api_20.SettingsApi();
        this._importsCoreApi = new coreApi_1.CoreApi();
        this._lineItemsAssociationsApi = new api_21.AssociationsApi();
        this._lineItemsBasicApi = new api_21.BasicApi();
        this._lineItemsBatchApi = new api_21.BatchApi();
        this._lineItemsSearchApi = new api_21.SearchApi();
        this._objectsAssociationsApi = new api_22.AssociationsApi();
        this._objectsBasicApi = new api_22.BasicApi();
        this._objectsBatchApi = new api_22.BatchApi();
        this._objectsSearchApi = new api_22.SearchApi();
        this._ownersDefaultApi = new api_24.DefaultApi();
        this._pipelinesApi = new api_25.PipelinesApi();
        this._pipelineStagesApi = new api_25.PipelineStagesApi();
        this._productsAssociationsApi = new api_26.AssociationsApi();
        this._productsBasicApi = new api_26.BasicApi();
        this._productsBatchApi = new api_26.BatchApi();
        this._productsSearchApi = new api_26.SearchApi();
        this._propertiesBatchApi = new api_27.BatchApi();
        this._propertiesCoreApi = new api_27.CoreApi();
        this._propertiesGroupsApi = new api_27.GroupsApi();
        this._quotesAssociationsApi = new api_28.AssociationsApi();
        this._quotesBasicApi = new api_28.BasicApi();
        this._quotesBatchApi = new api_28.BatchApi();
        this._quotesSearchApi = new api_28.SearchApi();
        this._schemasDefaultApi = new api_29.DefaultApi();
        this._schemasCoreApi = new api_29.CoreApi();
        this._ticketsAssociationsApi = new api_30.AssociationsApi();
        this._ticketsBasicApi = new api_30.BasicApi();
        this._ticketsBatchApi = new api_30.BatchApi();
        this._ticketsSearchApi = new api_30.SearchApi();
        this._eventsApi = new api_31.EventsApi();
        this._templatesApi = new api_31.TemplatesApi();
        this._tokensApi = new api_31.TokensApi();
        this._eventsEventsApi = new api_32.EventsApi();
        this._transactionalDefaultApi = new api_33.DefaultApi();
        this._settingsApi = new api_35.SettingsApi();
        this._subscriptionsApi = new api_35.SubscriptionsApi();
        this._auditLogsDefaultApi = new api_2.DefaultApi();
        this._authorsDefaultApi = new api_3.DefaultApi();
        this._blogPostsDefaultApi = new api_4.DefaultApi();
        this._tagsDefaultApi = new api_5.DefaultApi();
        this._domainsApi = new api_6.DomainsApi();
        this._rowsApi = new api_7.RowsApi();
        this._rowsBatchApi = new api_7.RowsBatchApi();
        this._tablesApi = new api_7.TablesApi();
        this._performanceDefaultApi = new api_8.DefaultApi();
        this._redirectsApi = new api_10.RedirectsApi();
        this._generateApi = new api_12.GenerateApi();
        this._siteSearchDefaultApi = new api_9.DefaultApi();
        this._apiClientsWithApiKeyAuth = [
            this._accountingCallbacksApi,
            this._accountingInvoiceApi,
            this._accountingSettingsApi,
            this._accountingSyncApi,
            this._accountingUserAccountsApi,
            this._actionsCallbacksApi,
            this._associationsBatchApi,
            this._typesApi,
            this._callingSettingsApi,
            this._communicationPreferencesDefinitionApi,
            this._communicationPreferencesStatusApi,
            this._companiesAssociationsApi,
            this._companiesBasicApi,
            this._companiesBatchApi,
            this._companiesSearchApi,
            this._contactsAssociationsApi,
            this._contactsBasicApi,
            this._contactsBatchApi,
            this._contactsSearchApi,
            this._dealsAssociationsApi,
            this._dealsBasicApi,
            this._dealsBatchApi,
            this._dealsSearchApi,
            this._feedbackSubmissionsAssociationsApi,
            this._feedbackSubmissionsBasicApi,
            this._feedbackSubmissionsBatchApi,
            this._feedbackSubmissionsSearchApi,
            this._importsCoreApi,
            this._lineItemsAssociationsApi,
            this._lineItemsBasicApi,
            this._lineItemsBatchApi,
            this._lineItemsSearchApi,
            this._objectsAssociationsApi,
            this._objectsBasicApi,
            this._objectsBatchApi,
            this._objectsSearchApi,
            this._ownersDefaultApi,
            this._pipelinesApi,
            this._pipelineStagesApi,
            this._productsAssociationsApi,
            this._productsBasicApi,
            this._productsBatchApi,
            this._productsSearchApi,
            this._propertiesBatchApi,
            this._propertiesCoreApi,
            this._propertiesGroupsApi,
            this._quotesAssociationsApi,
            this._quotesBasicApi,
            this._quotesBatchApi,
            this._quotesSearchApi,
            this._schemasDefaultApi,
            this._schemasCoreApi,
            this._ticketsAssociationsApi,
            this._ticketsBasicApi,
            this._ticketsBatchApi,
            this._ticketsSearchApi,
            this._templatesApi,
            this._tokensApi,
            this._eventsEventsApi,
            this._transactionalDefaultApi,
            this._authorsDefaultApi,
            this._blogPostsDefaultApi,
            this._tagsDefaultApi,
            this._domainsApi,
            this._rowsApi,
            this._rowsBatchApi,
            this._tablesApi,
            this._generateApi,
            this._redirectsApi,
            this._siteSearchDefaultApi,
            this._videoconferencingSettingsApi,
        ];
        this._apiClientsWithDevApiKeyAuth = [
            this._actionsDefinitionsApi,
            this._actionsFunctionsApi,
            this._actionsRevisionsApi,
            this._auditLogsDefaultApi,
            this._cardsApi,
            this._settingsApi,
            this._subscriptionsApi,
            this._performanceDefaultApi,
        ];
        this._apiClients = [
            ...this._apiClientsWithApiKeyAuth,
            ...this._apiClientsWithDevApiKeyAuth,
            this._oauthDefaultApi,
            this._cardsSampleResponseApi,
            this._eventsApi,
        ];
        this._numberOfApiCallRetries = NumberOfRetries.NoRetries;
        this._setUseQuerystring(true);
        this._setOptions(options);
        this.automation = {
            actions: {
                callbacksApi: this._actionsCallbacksApi,
                definitionsApi: this._actionsDefinitionsApi,
                functionsApi: this._actionsFunctionsApi,
                revisionsApi: this._actionsRevisionsApi,
            },
        };
        this.crm = {
            associations: {
                batchApi: this._associationsBatchApi,
                typesApi: this._typesApi,
            },
            companies: {
                associationsApi: this._companiesAssociationsApi,
                basicApi: this._companiesBasicApi,
                batchApi: this._companiesBatchApi,
                searchApi: this._companiesSearchApi,
                getAll: this._retrieveGetAllFunction(this._companiesBasicApi.getPage.bind(this._companiesBasicApi)),
            },
            contacts: {
                associationsApi: this._contactsAssociationsApi,
                basicApi: this._contactsBasicApi,
                batchApi: this._contactsBatchApi,
                searchApi: this._contactsSearchApi,
                getAll: this._retrieveGetAllFunction(this._contactsBasicApi.getPage.bind(this._contactsBasicApi)),
            },
            deals: {
                associationsApi: this._dealsAssociationsApi,
                basicApi: this._dealsBasicApi,
                batchApi: this._dealsBatchApi,
                searchApi: this._dealsSearchApi,
                getAll: this._retrieveGetAllFunction(this._dealsBasicApi.getPage.bind(this._dealsBasicApi)),
            },
            extensions: {
                accounting: {
                    callbacksApi: this._accountingCallbacksApi,
                    invoiceApi: this._accountingInvoiceApi,
                    settingsApi: this._accountingSettingsApi,
                    syncApi: this._accountingSyncApi,
                    userAccountsApi: this._accountingUserAccountsApi,
                },
                calling: {
                    settingsApi: this._callingSettingsApi,
                },
                cards: {
                    cardsApi: this._cardsApi,
                    sampleResponseApi: this._cardsSampleResponseApi,
                },
                videoconferencing: {
                    settingsApi: this._videoconferencingSettingsApi,
                },
            },
            imports: {
                coreApi: this._importsCoreApi,
            },
            lineItems: {
                associationsApi: this._lineItemsAssociationsApi,
                basicApi: this._lineItemsBasicApi,
                batchApi: this._lineItemsBatchApi,
                searchApi: this._lineItemsSearchApi,
                getAll: this._retrieveGetAllFunction(this._lineItemsBasicApi.getPage.bind(this._lineItemsBasicApi)),
            },
            objects: {
                associationsApi: this._objectsAssociationsApi,
                basicApi: this._objectsBasicApi,
                batchApi: this._objectsBatchApi,
                searchApi: this._objectsSearchApi,
                feedbackSubmissions: {
                    associationsApi: this._feedbackSubmissionsAssociationsApi,
                    basicApi: this._feedbackSubmissionsBasicApi,
                    batchApi: this._feedbackSubmissionsBatchApi,
                    searchApi: this._feedbackSubmissionsSearchApi,
                },
            },
            owners: {
                defaultApi: this._ownersDefaultApi,
            },
            pipelines: {
                pipelinesApi: this._pipelinesApi,
                pipelineStagesApi: this._pipelineStagesApi,
            },
            products: {
                associationsApi: this._productsAssociationsApi,
                basicApi: this._productsBasicApi,
                batchApi: this._productsBatchApi,
                searchApi: this._productsSearchApi,
                getAll: this._retrieveGetAllFunction(this._productsBasicApi.getPage.bind(this._productsBasicApi)),
            },
            properties: {
                batchApi: this._propertiesBatchApi,
                coreApi: this._propertiesCoreApi,
                groupsApi: this._propertiesGroupsApi,
            },
            quotes: {
                associationsApi: this._quotesAssociationsApi,
                basicApi: this._quotesBasicApi,
                batchApi: this._quotesBatchApi,
                searchApi: this._quotesSearchApi,
                getAll: this._retrieveGetAllFunction(this._quotesBasicApi.getPage.bind(this._quotesBasicApi)),
            },
            schemas: {
                defaultApi: this._schemasDefaultApi,
                coreApi: this._schemasCoreApi,
            },
            tickets: {
                associationsApi: this._ticketsAssociationsApi,
                basicApi: this._ticketsBasicApi,
                batchApi: this._ticketsBatchApi,
                searchApi: this._ticketsSearchApi,
                getAll: this._retrieveGetAllFunction(this._ticketsBasicApi.getPage.bind(this._ticketsBasicApi)),
            },
            timeline: {
                eventsApi: this._eventsApi,
                templatesApi: this._templatesApi,
                tokensApi: this._tokensApi,
            },
        };
        this.events = {
            eventsApi: this._eventsEventsApi,
        };
        this.marketing = {
            transactional: {
                defaultApi: this._transactionalDefaultApi,
            },
        };
        this.oauth = {
            defaultApi: this._oauthDefaultApi,
            getAuthorizationUrl: this._getAuthorizationUrl,
        };
        this.webhooks = {
            settingsApi: this._settingsApi,
            subscriptionsApi: this._subscriptionsApi,
            validateSignature: this._validateSignature,
        };
        this.cms = {
            auditLogs: {
                defaultApi: this._auditLogsDefaultApi,
            },
            blogs: {
                authors: {
                    defaultApi: this._authorsDefaultApi,
                },
                blogPosts: {
                    defaultApi: this._blogPostsDefaultApi,
                },
                tags: {
                    defaultApi: this._tagsDefaultApi,
                },
            },
            domains: {
                domainsApi: this._domainsApi,
            },
            hubdb: {
                rowsApi: this._rowsApi,
                rowsBatchApi: this._rowsBatchApi,
                tablesApi: this._tablesApi,
            },
            performance: {
                defaultApi: this._performanceDefaultApi,
            },
            urlRedirects: {
                redirectsApi: this._redirectsApi,
            },
            siteSearch: {
                defaultApi: this._siteSearchDefaultApi,
            },
        };
        this.communicationPreferences = {
            definitionApi: this._communicationPreferencesDefinitionApi,
            statusApi: this._communicationPreferencesStatusApi,
        };
        this.conversations = {
            visitorIdentification: {
                generateApi: this._generateApi,
            },
        };
    }
    setApiKey(apiKeyToSet) {
        this._apiKey = apiKeyToSet;
        this.authentications.hapikey.apiKey = apiKeyToSet;
        _.each(this._apiClientsWithApiKeyAuth, (apiClient) => {
            apiClient.setApiKey(0, apiKeyToSet);
        });
    }
    setDeveloperApiKey(developerApiKeyToSet) {
        this._developerApiKey = developerApiKeyToSet;
        _.each(this._apiClientsWithDevApiKeyAuth, (apiClient) => {
            apiClient.setApiKey(0, developerApiKeyToSet);
        });
    }
    setBasePath(basePathToSet) {
        if (_.isNil(basePathToSet)) {
            return;
        }
        this._basePath = basePathToSet.replace(/\/+$/, '');
        _.each(this._apiClients, (apiClient) => {
            apiClient.basePath = this._basePath;
        });
    }
    setAccessToken(accessTokenToSet) {
        this._accessToken = accessTokenToSet;
        this.authentications.oauth2.accessToken = accessTokenToSet;
        _.each(this._apiClients, (apiClient) => {
            apiClient.accessToken = accessTokenToSet;
        });
    }
    addInterceptor(interceptor) {
        this._interceptors.push(interceptor);
        _.each(this._apiClients, (apiClient) => {
            apiClient.addInterceptor(interceptor);
        });
    }
    setDefaultHeaders(defaultHeadersToSet) {
        this._defaultHeaders = _.assign({}, defaultHeadersToSet, DEFAULT_HEADERS);
        _.each(this._apiClients, (apiClient) => {
            apiClient.defaultHeaders = this._defaultHeaders;
        });
    }
    setAuth(options = {}) {
        if (options.apiKey) {
            this.setApiKey(options.apiKey);
        }
        if (options.developerApiKey) {
            this.setDeveloperApiKey(options.developerApiKey);
        }
        if (options.accessToken) {
            this.setAccessToken(options.accessToken);
        }
    }
    getOptions() {
        return {
            basePath: this._basePath,
            defaultHeaders: this._defaultHeaders,
            apiKey: this._apiKey,
            developerApiKey: this._developerApiKey,
            accessToken: this._accessToken,
            useLimiter: this._useLimiter,
            limiterOptions: this._limiterOptions,
            numberOfApiCallRetries: this._numberOfApiCallRetries,
            interceptors: this._interceptors,
        };
    }
    apiRequest(opts) {
        const params = _.cloneDeep(opts);
        params.method = params.method || 'GET';
        params.json = true;
        params.resolveWithFullResponse = true;
        params.url = params.overlapUrl || this._basePath + (params.path || '');
        delete params.overlapUrl;
        delete params.path;
        params.qsStringifyOptions = {
            arrayFormat: 'repeat',
        };
        params.qs = Object.assign({}, params.qs);
        params.headers = _.assign({}, opts.headers, this._defaultHeaders);
        if (this.authentications.hapikey.apiKey) {
            this.authentications.hapikey.applyToRequest(params);
        }
        if (this.authentications.oauth2.accessToken) {
            this.authentications.oauth2.applyToRequest(params);
        }
        let authenticationPromise = Promise.resolve();
        if (this.authentications.hapikey.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.hapikey.applyToRequest(params));
        }
        if (this.authentications.oauth2.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.oauth2.applyToRequest(params));
        }
        let interceptorPromise = authenticationPromise;
        for (const interceptor of this._interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(params));
        }
        return interceptorPromise.then(() => {
            return new Promise((resolve, reject) => {
                request(params, (error, response, body) => {
                    if (error) {
                        reject(error);
                    }
                    else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response, body });
                        }
                        else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    _getAuthorizationUrl(clientId, redirectUri, scope, optionalScope, state) {
        const params = {
            client_id: clientId,
            redirect_uri: redirectUri,
            scope,
            optional_scope: optionalScope,
            state,
        };
        return `https://app.hubspot.com/oauth/authorize?${qs.stringify(_.omitBy(params, _.isNil))}`;
    }
    _validateSignature(signature, clientSecret, requestBody, signatureVersion = 'v1', webhooksUrl, webhooksMethod = 'POST') {
        const sourceString = _.isEqual(signatureVersion, 'v1')
            ? clientSecret + requestBody
            : clientSecret + webhooksMethod + webhooksUrl + requestBody;
        const hash = crypto
            .createHash('sha256')
            .update(sourceString)
            .digest('hex');
        return _.isEqual(signature, hash);
    }
    _retrieveGetAllFunction(getPageFunction) {
        return (limit, after, properties, associations, archived, options) => __awaiter(this, void 0, void 0, function* () {
            const limitInternal = limit !== null && limit !== void 0 ? limit : 100;
            let afterInternal = after;
            const result = [];
            let response;
            do {
                response = yield getPageFunction(limitInternal, afterInternal, properties, associations, archived, options);
                afterInternal = _.get(response, 'body.paging.next.after');
                result.push(..._.get(response, 'body.results'));
            } while (!_.isNil(afterInternal));
            return result;
        });
    }
    _setOptions(options) {
        this.setAuth(options);
        this.setBasePath(options.basePath);
        this.setDefaultHeaders(options.defaultHeaders);
        this._setMethodsPatchOptions(options);
        this._setInterceptors(options);
    }
    _setUseQuerystring(useQuerystring) {
        _.each(this._apiClients, (apiClient) => (apiClient._useQuerystring = useQuerystring));
    }
    _getLimiterWrappedMethod(method) {
        if (!this._limiter) {
            throw new Error('Limiter not defined');
        }
        return this._limiter.wrap(method);
    }
    _getSearchLimiterWrappedMethod(method) {
        if (!this._searchLimiter) {
            throw new Error('Search Limiter not defined');
        }
        return this._searchLimiter.wrap(method);
    }
    _waitAfterRequestFailure(statusCode, retryNumber, retryTimeout) {
        console.error(`Request failed with status code [${statusCode}], will retry [${retryNumber}] time in [${retryTimeout}] ms`);
        return new Promise((resolve) => setTimeout(resolve, retryTimeout * retryNumber));
    }
    _getRetryWrappedMethod(method) {
        return (...args) => __awaiter(this, void 0, void 0, function* () {
            const numberOfRetries = this._numberOfApiCallRetries.valueOf() + 1;
            let resultSuccess;
            let resultRejected;
            for (let index = 1; index <= numberOfRetries; index++) {
                try {
                    resultSuccess = yield method(...args);
                    resultRejected = null;
                    break;
                }
                catch (e) {
                    resultRejected = e;
                    if (_.isEqual(index, numberOfRetries)) {
                        break;
                    }
                    const statusCode = _.get(e, 'response.statusCode');
                    if (statusCode >= 500 && statusCode <= 599) {
                        yield this._waitAfterRequestFailure(statusCode, index, RETRY_TIMEOUT.INTERNAL_SERVER_ERROR);
                        continue;
                    }
                    if (_.isEqual(statusCode, 429)) {
                        const policyName = _.get(e, 'response.body.policyName');
                        if (_.isEqual(policyName, TEN_SECONDLY_ROLLING)) {
                            yield this._waitAfterRequestFailure(statusCode, index, RETRY_TIMEOUT.TOO_MANY_REQUESTS);
                            continue;
                        }
                        const message = _.get(e, 'response.body.message');
                        if (_.isEqual(message, SECONDLY_LIMIT_MESSAGE)) {
                            yield this._waitAfterRequestFailure(statusCode, index, RETRY_TIMEOUT.TOO_MANY_SEARCH_REQUESTS);
                            continue;
                        }
                    }
                    break;
                }
            }
            return new Promise((resolve, reject) => {
                if (resultRejected) {
                    return reject(resultRejected);
                }
                return resolve(resultSuccess);
            });
        });
    }
    _patchApiClientMethod(methodName, clientInstance, clientPrototype) {
        const methodToPatch = clientPrototype[methodName].bind(clientInstance);
        let patchedMethod = methodToPatch;
        if (this._useSearchLimiter && _.isEqual(methodName, SEARCH_METHOD_NAME)) {
            patchedMethod = this._getSearchLimiterWrappedMethod(methodToPatch);
        }
        if (this._useLimiter) {
            patchedMethod = this._getLimiterWrappedMethod(patchedMethod);
        }
        if (!_.isEqual(this._numberOfApiCallRetries, NumberOfRetries.NoRetries)) {
            patchedMethod = this._getRetryWrappedMethod(patchedMethod);
        }
        clientInstance[methodName] = patchedMethod;
    }
    _patchApiClient(clientInstance) {
        const clientPrototype = Object.getPrototypeOf(clientInstance);
        let methodsNamesToPatch = Object.getOwnPropertyNames(clientPrototype);
        methodsNamesToPatch = _.differenceWith(methodsNamesToPatch, METHOD_NAMES_TO_EXCLUDE_FROM_PATCHING);
        const patchFn = this._patchApiClientMethod.bind(this);
        _.each(methodsNamesToPatch, (methodName) => {
            patchFn(methodName, clientInstance, clientPrototype);
        });
    }
    _patchApiClients() {
        _.each(this._apiClients, this._patchApiClient.bind(this));
    }
    _patchApiRequestMethod() {
        let apiRequestMethodToPatch = this.apiRequest.bind(this);
        if (this._useLimiter) {
            apiRequestMethodToPatch = this._getLimiterWrappedMethod(apiRequestMethodToPatch);
        }
        if (!_.isEqual(this._numberOfApiCallRetries, NumberOfRetries.NoRetries)) {
            apiRequestMethodToPatch = this._getRetryWrappedMethod(apiRequestMethodToPatch);
        }
        this.apiRequest = apiRequestMethodToPatch;
    }
    _setMethodsPatchOptions(options = {}) {
        this._useLimiter = _.isNil(options.useLimiter) ? true : options.useLimiter;
        this._numberOfApiCallRetries = _.isNil(options.numberOfApiCallRetries)
            ? NumberOfRetries.NoRetries
            : options.numberOfApiCallRetries;
        if (this._useLimiter) {
            this._limiterOptions = _.isNil(options.limiterOptions) ? DEFAULT_LIMITER_OPTIONS : options.limiterOptions;
            this._limiter = new bottleneck_1.default(this._limiterOptions);
            const limiterMinTime = _.get(this._limiterOptions, 'minTime') || 0;
            if (limiterMinTime < SEARCH_LIMITER_MIN_TIME) {
                this._useSearchLimiter = true;
                const minTime = SEARCH_LIMITER_MIN_TIME - limiterMinTime;
                const id = `search-${this._limiterOptions.id}`;
                this._searchLimiterOptions = Object.assign(Object.assign({}, this._limiterOptions), { minTime, id, maxConcurrent: 3 });
                this._searchLimiter = new bottleneck_1.default(this._searchLimiterOptions);
            }
        }
        if (this._useLimiter || !_.isEqual(this._numberOfApiCallRetries, NumberOfRetries.NoRetries)) {
            this._patchApiClients();
            this._patchApiRequestMethod();
        }
    }
    _setInterceptors(options = {}) {
        if (options.interceptors) {
            _.each(options.interceptors, this.addInterceptor.bind(this));
        }
    }
}
exports.Client = Client;
